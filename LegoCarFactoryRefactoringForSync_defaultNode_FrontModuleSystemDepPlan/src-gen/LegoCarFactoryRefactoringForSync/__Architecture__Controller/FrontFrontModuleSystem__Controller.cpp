// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define LegoCarFactoryRefactoringForSync___Architecture__Controller_FrontFrontModuleSystem__Controller_BODY

/************************************************************
 FrontFrontModuleSystem__Controller class body
 ************************************************************/

// include associated header file
#include "LegoCarFactoryRefactoringForSync/__Architecture__Controller/FrontFrontModuleSystem__Controller.h"

// Derived includes directives
#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Front/FrontModuleSystem.h"

namespace LegoCarFactoryRefactoringForSync {
namespace __Architecture__Controller {

// static attributes (if any)

/**
 * 
 * @param origin 
 */
FrontFrontModuleSystem__Controller::FrontFrontModuleSystem__Controller(
		::LegoCarFactoryRefactoringForSync::LegoCarComponents::Modules::Front::FrontModuleSystem* /*in*/origin) :
		p_origin(origin) {
}

/**
 * 
 */
void FrontFrontModuleSystem__Controller::createConnections() {
	// realization of connector <Connector1>
	p_origin->controller.frontcontrolcomponentController.connect_pOutStopProcess_Shelf(
			p_origin->shelf.slaveshelfController.get_pInStopProcess());

	// realization of connector <Connector2>
	p_origin->controller.frontcontrolcomponentController.connect_pOutStopProcess_RoboticArm(
			p_origin->roboticArm.frontroboticarmController.get_pStopProcess());

	// realization of connector <Connector3>
	p_origin->controller.frontcontrolcomponentController.connect_pStopProcess_Convoyer(
			p_origin->convoyer.frontconvoyerController.get_pInStopProcess());

	// realization of connector <Connector4>
	p_origin->controller.frontcontrolcomponentController.connect_pOutStopProcess_Press(
			p_origin->press.slavepressController.get_pInStopProcess());

	// realization of connector <Connector5>
	p_origin->controller.frontcontrolcomponentController.connect_pOutRestart_Shelf(
			p_origin->shelf.slaveshelfController.get_pInRestart());

	// realization of connector <Connector6>
	p_origin->controller.frontcontrolcomponentController.connect_pOutRestart_Convoyer(
			p_origin->convoyer.frontconvoyerController.get_pRestart());

	// realization of connector <Connector7>
	p_origin->controller.frontcontrolcomponentController.connect_pOutRestart_Robotic(
			p_origin->roboticArm.frontroboticarmController.get_pInRestart());

	// realization of connector <Connector8>
	p_origin->controller.frontcontrolcomponentController.connect_pOutRestart_Press(
			p_origin->press.slavepressController.get_pInRestart());

	// realization of connector <Connector9>
	p_origin->controller.frontcontrolcomponentController.connect_pPrepare(
			p_origin->convoyer.frontconvoyerController.get_pPrepare());

	// realization of connector <Connector10>
	p_origin->controller.frontcontrolcomponentController.connect_pCheckRack(
			p_origin->shelf.slaveshelfController.get_pCheckRack());

	// realization of connector <Connector11>
	p_origin->controller.frontcontrolcomponentController.connect_pDelivered(
			p_origin->convoyer.frontconvoyerController.get_pDelivered());

	// realization of connector <Connector12>
	p_origin->roboticArm.frontroboticarmController.connect_pDelivered(
			p_origin->convoyer.frontconvoyerController.get_pDelivered());

	// realization of connector <Connector13>
	p_origin->roboticArm.frontroboticarmController.connect_pStopProcess(
			p_origin->convoyer.frontconvoyerController.get_pInStopProcess());

	// realization of connector <Connector14>
	p_origin->convoyer.frontconvoyerController.connect_pCheckRack(
			p_origin->shelf.slaveshelfController.get_pCheckRack());

	// realization of connector <Connector15>
	p_origin->convoyer.frontconvoyerController.connect_pErrDetect(
			p_origin->controller.frontcontrolcomponentController.get_pErrDetect());

	// realization of connector <Connector16>
	p_origin->convoyer.frontconvoyerController.connect_pEndOfMo_Control(
			p_origin->controller.frontcontrolcomponentController.get_pEndOfMo());

	// realization of connector <Connector17>
	p_origin->convoyer.frontconvoyerController.connect_pEndOfMo_Shelf(
			p_origin->shelf.slaveshelfController.get_pEndOfMo());

	// realization of connector <Connector18>
	p_origin->convoyer.frontconvoyerController.connect_pEndOfMo_Robotic(
			p_origin->roboticArm.frontroboticarmController.get_pEndOfMo());

	// realization of connector <Connector19>
	p_origin->convoyer.frontconvoyerController.connect_pEndOfMo_Press(
			p_origin->press.slavepressController.get_pEndOfMo());

	// realization of connector <Connector20>
	p_origin->shelf.slaveshelfController.connect_pErrDetect(
			p_origin->controller.frontcontrolcomponentController.get_pErrDetect());

	// realization of connector <Connector21>
	p_origin->shelf.slaveshelfController.connect_pPickPiece(
			p_origin->roboticArm.frontroboticarmController.get_pPickPiece());

	// realization of connector <Connector22>
	p_origin->convoyer.frontconvoyerController.connect_pOutAssemble(
			p_origin->press.slavepressController.get_pPressAssemble());

	// realization of connector <Connector23>
	p_origin->roboticArm.frontroboticarmController.connect_pLCD(
			p_origin->controller.frontcontrolcomponentController.get_pLCD());

	// realization of connector <Connector24>
	p_origin->shelf.slaveshelfController.connect_pLCD(
			p_origin->controller.frontcontrolcomponentController.get_pLCD());

	// realization of connector <Connector25>
	p_origin->press.slavepressController.connect_pLCD(
			p_origin->controller.frontcontrolcomponentController.get_pLCD());

	// realization of connector <Connector26>
	p_origin->convoyer.frontconvoyerController.connect_pLCD(
			p_origin->controller.frontcontrolcomponentController.get_pLCD());

	// realization of connector <Connector27>
	p_origin->roboticArm.frontroboticarmController.connect_pModule(
			p_origin->controller.frontcontrolcomponentController.get_pModule());

	// realization of connector <Connector28>
	p_origin->convoyer.frontconvoyerController.connect_pModule(
			p_origin->controller.frontcontrolcomponentController.get_pModule());

	// realization of connector <Connector29>
	p_origin->shelf.slaveshelfController.connect_pModule(
			p_origin->controller.frontcontrolcomponentController.get_pModule());

	// realization of connector <Connector30>
	p_origin->press.slavepressController.connect_pModule(
			p_origin->controller.frontcontrolcomponentController.get_pModule());

	// realization of connector <Connector31>
	p_origin->controller.frontcontrolcomponentController.connect_pIFloatMotor(
			p_origin->roboticArm.frontroboticarmController.get_pIFloatMotor());

	// realization of connector <Connector32>
	p_origin->controller.frontcontrolcomponentController.connect_pILargeMotor(
			p_origin->convoyer.frontconvoyerController.get_pILargeMotor());

	// realization of connector <Connector33>
	p_origin->controller.frontcontrolcomponentController.connect_pPressILargeMotor(
			p_origin->press.slavepressController.get_pILargeMotor());

}

} // of namespace __Architecture__Controller
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
 End of FrontFrontModuleSystem__Controller class body
 ************************************************************/
