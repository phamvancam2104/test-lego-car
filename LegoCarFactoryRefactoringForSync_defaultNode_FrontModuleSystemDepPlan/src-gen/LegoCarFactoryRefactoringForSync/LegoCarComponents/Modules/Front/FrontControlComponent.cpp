// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define LegoCarFactoryRefactoringForSync_LegoCarComponents_Modules_Front_FrontControlComponent_BODY

/************************************************************
 FrontControlComponent class body
 ************************************************************/

// include associated header file
#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Front/FrontControlComponent.h"

// Derived includes directives
#include "CarFactoryLibrary/CommunicationInterfaces/IRoboticArmFloatMotor.h"
#include "CarFactoryLibrary/events/CheckRack.h"
#include "CarFactoryLibrary/events/DeliveredCarConveyor.h"
#include "CarFactoryLibrary/events/EndOfModule.h"
#include "CarFactoryLibrary/events/ErrorDetection.h"
#include "EV3PapyrusLibrary/Interfaces/Actuators/ILargeMotor.h"
#include "LegoCarFactoryRefactoringForSync/signals/PrepareConveyor.h"
#include "LegoCarFactoryRefactoringForSync/signals/RestartAfterEmergencyStop.h"
#include "LegoCarFactoryRefactoringForSync/signals/StopProcess.h"

// Include from Include declaration (body)
void bindPorts(Port& p1, Port& p2) {
}
// End of Include declaration (body)

namespace LegoCarFactoryRefactoringForSync {
namespace LegoCarComponents {
namespace Modules {
namespace Front {

// static attributes (if any)

/**
 * 
 */
void FrontControlComponent::reset() {
	write(CarFactoryLibrary::MASTER_MODULE, CarFactoryLibrary::RESULT_OK); //acknowledgement
	pIFloatMotor.requiredIntf->float_motors();//robotic_arm.float_motors();
	pILargeMotor.requiredIntf->stop();//conveyor.motor.stop(false);
	pPressILargeMotor.requiredIntf->stop(); //.motor.stop(false);
	LegoCarFactoryRefactoringForSync::signals::StopProcess s;
	s.is_emergency_stop = true;
	pOutStopProcess_Shelf.outIntf->push(s); // shelf.sendStopProcess(s);
	pOutStopProcess_RoboticArm.outIntf->push(s);//robotic_arm.sendStopProcess(s);
	pStopProcess_Convoyer.outIntf->push(s);//conveyor.sendStopProcess(s);
	pOutStopProcess_Press.outIntf->push(s);

	LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop s1;
	pOutRestart_Shelf.outIntf->push(s1);//shelf.sendRestartAfterEmergencyStop(s1);
	pOutRestart_Robotic.outIntf->push(s1);//robotic_arm.sendRestartAfterEmergencyStop(s1);
	pOutRestart_Convoyer.outIntf->push(s1);//conveyor.sendRestartAfterEmergencyStop(s1);
	pOutRestart_Press.outIntf->push(s1);//press.sendRestartAfterEmergencyStop(s1);

	status = CarFactoryLibrary::RESULT_READY;
}

/**
 * Initialize all bluetooth connection and ping bricks to check
 * @return ret 
 */
bool FrontControlComponent::init_bluetooth_communication() {
	std::cout << "init " << std::endl;
	if (!ev3Brick.bluetoothDevice.accept_connection(bluetooth_name[CarFactoryLibrary::MASTER_MODULE])) {
		perror("not connected");
		return false;
	}
	write(CarFactoryLibrary::MASTER_MODULE, CarFactoryLibrary::RESULT_OK);
	std::cout << "return true " << std::endl;
	return true;
}

/**
 * answer to a ping command
 */
void FrontControlComponent::ping_response() {
	write(CarFactoryLibrary::MASTER_MODULE, CarFactoryLibrary::RESULT_OK);
}

/**
 * answer to CMD_GET_STATUS
 */
void FrontControlComponent::get_status_response() {
	write(CarFactoryLibrary::MASTER_MODULE, status);
}

/**
 * 
 * @param sig 
 */
void FrontControlComponent::effectFromEmnergencyStopStatetoMisplace(
		::CarFactoryLibrary::events::ErrorDetection& /*in*/sig) {
	error_detection_is_misplace = sig.is_misplace;
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromWaittoEmergencyButtonPressGuard() {
	return emergency_button.value(0);
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromChoice1toRestartGuard() {
	return ev3Brick.topButton.pressed();
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromChoice2toRestartGuard() {
	return ev3Brick.topButton.pressed();
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromChoicetoPingGuard() {
	return msg == CarFactoryLibrary::CMD_PING;
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromChoicetoGetStatusGuard() {
	return msg == CarFactoryLibrary::CMD_GET_STATUS;
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromChoicetoLoadCarGuard() {
	return msg == CarFactoryLibrary::CMD_LOAD_CAR;
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromChoicetoDeliverGuard() {
	return msg == CarFactoryLibrary::CMD_DELIVER;
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromChoicetoRewindGuard() {
	return msg == CarFactoryLibrary::CMD_REWIND;
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromChoicetoAssembleGuard() {
	return msg == CarFactoryLibrary::CMD_ASSEMBLE;
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromChoicetoFinalState1Guard() {
	return msg == CarFactoryLibrary::CMD_STOP;
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromChoicetoResetGuard() {
	return msg == CarFactoryLibrary::CMD_RESET;
}

/**
 * 
 * @return ret 
 */
bool FrontControlComponent::fromInitializationtoPrincipalStateGuard() {
	return init_bluetooth_communication();
}

/**
 * 
 */
void FrontControlComponent::init() {
	led_status.all_led_on();
	usleep(50000);
	led_status.all_led_off();
	manageOrangeLights();
}

/**
 * 
 */
void FrontControlComponent::doActivityCheck() {
	//CHECKPOINT
}

/**
 * 
 */
void FrontControlComponent::sendStopProcessEvent() {
	ev3Brick.soundDevice.tone(100, 100);
	pIFloatMotor.requiredIntf->float_motors();//robotic_arm.float_motors();
	pILargeMotor.requiredIntf->stop();//conveyor.motor.stop(false);
	pPressILargeMotor.requiredIntf->stop();//press.motor.stop(false);
	LegoCarFactoryRefactoringForSync::signals::StopProcess s;
	s.is_emergency_stop = true;
	pOutStopProcess_Shelf.outIntf->push(s);//shelf.sendStopProcess(s);
	pOutStopProcess_RoboticArm.outIntf->push(s);//robotic_arm.sendStopProcess(s);
	pStopProcess_Convoyer.outIntf->push(s);//conveyor.sendStopProcess(s);
	pOutStopProcess_Press.outIntf->push(s);//press.sendStopProcess(s);
	status = CarFactoryLibrary::RESULT_STOP;
}

/**
 * 
 */
void FrontControlComponent::sendStopProcess() {
	if (error_detection_is_misplace) {
		showMisplacePartGUI();
	} else {
		showEmptyRackGUI (color);
	}
	LegoCarFactoryRefactoringForSync::signals::StopProcess s;
	s.is_emergency_stop = false;
	pOutStopProcess_Shelf.outIntf->push(s);//shelf.sendStopProcess(s);
	pOutStopProcess_RoboticArm.outIntf->push(s);//robotic_arm.sendStopProcess(s);
	pStopProcess_Convoyer.outIntf->push(s);//conveyor.sendStopProcess(s);
}

/**
 * 
 */
void FrontControlComponent::show_stop_GUI() {
	showStopGUI();
}

/**
 * 
 */
void FrontControlComponent::send_restart_event() {
	LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop s;
	pOutRestart_Shelf.outIntf->push(s);//shelf.sendRestartAfterEmergencyStop(s);
	pOutRestart_Robotic.outIntf->push(s);//robotic_arm.sendRestartAfterEmergencyStop(s);
	pOutRestart_Convoyer.outIntf->push(s);//conveyor.sendRestartAfterEmergencyStop(s);
	pOutRestart_Press.outIntf->push(s);//press.sendRestartAfterEmergencyStop(s);
	status = CarFactoryLibrary::RESULT_READY;
}

/**
 * 
 */
void FrontControlComponent::read() {
	bool stop = false;
	while (!stop) {
		std::string tmp_string = readFromMaster();

		//split receive message
		int split_index = tmp_string.find("-");
		if (split_index != std::string::npos) {
			extra_msg = tmp_string.substr(split_index + 1);
			msg = parseMasterMessage(tmp_string.substr(0, split_index));
			std::cout << msg << std::endl;
		} else {
			msg = parseMasterMessage(tmp_string);
		}
		if (msg == CarFactoryLibrary::CMD_ASSEMBLE || msg == CarFactoryLibrary::CMD_DELIVER || msg == CarFactoryLibrary::CMD_LOAD_CAR) {
			status = CarFactoryLibrary::RESULT_BUSY;
		}
		if (msg != CarFactoryLibrary::NO_MASTER_MSG)
			stop = true;
		//CHECKPOINT
	}
}



/**
 * 
 */
void FrontControlComponent::sendPrepareConveyorEvent() {
	write(CarFactoryLibrary::MASTER_MODULE, CarFactoryLibrary::RESULT_OK); //acknowledgement
	manageGreenLights();
	LegoCarFactoryRefactoringForSync::signals::PrepareConveyor s;
	pPrepare.outIntf->push(s);//conveyor.sendPrepareConveyor(s);
}

/**
 * 
 */
void FrontControlComponent::send_check_racks_event() {
	write(CarFactoryLibrary::MASTER_MODULE, CarFactoryLibrary::RESULT_OK); //acknowledgement
	manageGreenLights();
	CarFactoryLibrary::events::CheckRack s;
	s.color = static_cast<CarFactoryLibrary::Colors>(std::stoi(extra_msg));
	color = static_cast<CarFactoryLibrary::Colors>(std::stoi(extra_msg));
	pCheckRack.outIntf->push(s);//shelf.sendCheckRack(s);
}

/**
 * 
 */
void FrontControlComponent::rewind() {
	write(CarFactoryLibrary::MASTER_MODULE, CarFactoryLibrary::RESULT_OK); //acknowledgement
	manageGreenLights();
	//TODO:refactor conveyor.rewind();
}

/**
 * 
 */
void FrontControlComponent::deliver() {
	write(CarFactoryLibrary::MASTER_MODULE, CarFactoryLibrary::RESULT_OK); //acknowledgement
	manageGreenLights();
	CarFactoryLibrary::events::DeliveredCarConveyor s;
	pDelivered.outIntf->push(s);//conveyor.sendDeliveredCarConveyor(s);
}

/**
 * 
 */
FrontControlComponent::FrontControlComponent() :
		CarFactoryLibrary::Module("in2", "lego-ev3-color", "lego-ev3-color",
				"lego-ev3-color", "in4", "in3:i2c88", "outB", "in3:i2c88:sv6",
				"in3:i2c88:sv7", "in3:i2c88:sv8"), frontcontrolcomponentController(
				this) {
}

} // of namespace Front
} // of namespace Modules
} // of namespace LegoCarComponents
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
 End of FrontControlComponent class body
 ************************************************************/
