// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define BootLoaderCpp_BootLoader_BODY

/************************************************************
              BootLoader class body
 ************************************************************/


// include associated header file
#include "BootLoaderCpp/BootLoader.h"

// Derived includes directives

// Include from Include declaration (body)
BootLoaderCpp::BootLoader bootloader;

int main (int argc, const char* argv[])
{
	// store arguments for future access
	BootLoaderCpp::BootLoader::argc = argc;
	BootLoaderCpp::BootLoader::argv = argv;

	bootloader.init();
	return 0;
}

// End of Include declaration (body)

namespace BootLoaderCpp {

// static attributes (if any)
/**
 * 
 */
 ::PrimitiveTypes::Integer  BootLoader::argc;
/**
 * 
 */
 ::PrimitiveTypes::String*  BootLoader::argv;

/**
 * 
 */
void BootLoader::init() {
	mainInstance.press.motor.CppLargeMotorDelegatee.setComponent(&(mainInstance.press.motor));
					mainInstance.press.SlavePressDelegatee.setComponent(&(mainInstance.press));
					mainInstance.shelf.rack_3.color_sensor.CppColorSensorDelegatee.setComponent(&(mainInstance.shelf.rack_3.color_sensor));
					mainInstance.shelf.rack_3.RackDelegatee.setComponent(&(mainInstance.shelf.rack_3));
					mainInstance.shelf.rack_2.color_sensor.CppColorSensorDelegatee.setComponent(&(mainInstance.shelf.rack_2.color_sensor));
					mainInstance.shelf.rack_2.RackDelegatee.setComponent(&(mainInstance.shelf.rack_2));
					mainInstance.shelf.rack_1.color_sensor.CppColorSensorDelegatee.setComponent(&(mainInstance.shelf.rack_1.color_sensor));
					mainInstance.shelf.rack_1.RackDelegatee.setComponent(&(mainInstance.shelf.rack_1));
					mainInstance.shelf.SlaveShelfDelegatee.setComponent(&(mainInstance.shelf));
					mainInstance.convoyer.color_sensor.CppColorSensorDelegatee.setComponent(&(mainInstance.convoyer.color_sensor));
					mainInstance.convoyer.motor.CppLargeMotorDelegatee.setComponent(&(mainInstance.convoyer.motor));
					mainInstance.convoyer.FrontConvoyerDelegatee.setComponent(&(mainInstance.convoyer));
					mainInstance.roboticArm.motor_right_left.CppServoMotorDelegatee.setComponent(&(mainInstance.roboticArm.motor_right_left));
					mainInstance.roboticArm.motor_front_back.CppServoMotorDelegatee.setComponent(&(mainInstance.roboticArm.motor_front_back));
					mainInstance.roboticArm.motor_up_down.CppServoMotorDelegatee.setComponent(&(mainInstance.roboticArm.motor_up_down));
					mainInstance.roboticArm.FrontRoboticArmDelegatee.setComponent(&(mainInstance.roboticArm));
					mainInstance.controller.emergency_button.CppTouchSensorDelegatee.setComponent(&(mainInstance.controller.emergency_button));
					mainInstance.controller.ev3Brick.bluetoothDevice.CppBlutoothDelegatee.setComponent(&(mainInstance.controller.ev3Brick.bluetoothDevice));
					mainInstance.controller.ev3Brick.soundDevice.CppSoundDelegatee.setComponent(&(mainInstance.controller.ev3Brick.soundDevice));
					mainInstance.controller.ev3Brick.lcdScreen.CppLcdDelegatee.setComponent(&(mainInstance.controller.ev3Brick.lcdScreen));
					mainInstance.controller.ev3Brick.okButton.CppButtonDelegatee.setComponent(&(mainInstance.controller.ev3Brick.okButton));
					mainInstance.controller.ev3Brick.downButton.CppButtonDelegatee.setComponent(&(mainInstance.controller.ev3Brick.downButton));
					mainInstance.controller.ev3Brick.topButton.CppButtonDelegatee.setComponent(&(mainInstance.controller.ev3Brick.topButton));
					mainInstance.controller.ev3Brick.rightButton.CppButtonDelegatee.setComponent(&(mainInstance.controller.ev3Brick.rightButton));
					mainInstance.controller.ev3Brick.leftButton.CppButtonDelegatee.setComponent(&(mainInstance.controller.ev3Brick.leftButton));
					mainInstance.controller.ev3Brick.backButton.CppButtonDelegatee.setComponent(&(mainInstance.controller.ev3Brick.backButton));
					mainInstance.controller.ev3Brick.rightRedLed.CppLedDelegatee.setComponent(&(mainInstance.controller.ev3Brick.rightRedLed));
					mainInstance.controller.ev3Brick.leftRedLed.CppLedDelegatee.setComponent(&(mainInstance.controller.ev3Brick.leftRedLed));
					mainInstance.controller.ev3Brick.rightGreenLed.CppLedDelegatee.setComponent(&(mainInstance.controller.ev3Brick.rightGreenLed));
					mainInstance.controller.ev3Brick.leftGreenLed.CppLedDelegatee.setComponent(&(mainInstance.controller.ev3Brick.leftGreenLed));
					mainInstance.controller.ev3Brick.CppEV3BrickDelegatee.setComponent(&(mainInstance.controller.ev3Brick));
					mainInstance.controller.FrontControlComponentDelegatee.setComponent(&(mainInstance.controller));
				mainInstance.FrontModuleSystemDelegatee.setComponent(&mainInstance);
	mainInstance.FrontModuleSystemDelegatee.createConnections();
	
	mainInstance.controller.FrontControlComponentDelegatee.configure_queue_size();
	mainInstance.controller.FrontControlComponentDelegatee.startBehavior();
	mainInstance.roboticArm.FrontRoboticArmDelegatee.configure_queue_size();
	mainInstance.roboticArm.FrontRoboticArmDelegatee.startBehavior();
	mainInstance.convoyer.FrontConvoyerDelegatee.configure_queue_size();
	mainInstance.convoyer.FrontConvoyerDelegatee.startBehavior();
	mainInstance.shelf.SlaveShelfDelegatee.configure_queue_size();
	mainInstance.shelf.SlaveShelfDelegatee.startBehavior();
	mainInstance.press.SlavePressDelegatee.configure_queue_size();
	mainInstance.press.SlavePressDelegatee.startBehavior();
	//do we always really need a default infinitive loop?
	for(;;) {
		//do nothing
	}
}



} // of namespace BootLoaderCpp

/************************************************************
              End of BootLoader class body
 ************************************************************/
