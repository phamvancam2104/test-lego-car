<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:C_Cpp="http://www.eclipse.org/papyrus/C_Cpp/1" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_aqzt0LUYEee94q5Wi6avnA" name="BootLoaderCpp">
    <packagedElement xmi:type="uml:Class" xmi:id="_yvoocHhpEealuJVOx0h2iw" name="BootLoader">
      <ownedAttribute xmi:id="_i8h2AHlvEeavUcYMQ2Z1Aw" name="argc" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="/LegoCarFactoryRefactoringForSync_defaultNode_RoofModuleSystemDepPlan/model/PrimitiveTypes.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_ET2FoHjkEeakrcXZeNIVKw" name="argv" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="/LegoCarFactoryRefactoringForSync_defaultNode_RoofModuleSystemDepPlan/model/PrimitiveTypes.uml#String"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_JDJtYHjkEeakrcXZeNIVKw" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_JDNXwHjkEeakrcXZeNIVKw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_aq8QsLUYEee94q5Wi6avnA" name="mainInstance" aggregation="composite">
        <type xmi:type="uml:Class" href="/LegoCarFactoryRefactoringForSync_defaultNode_RoofModuleSystemDepPlan/model/LegoCarFactoryRefactoringForSync.uml#_xgByMAsbEeeXB4PYyUFeww"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_arPysLUYEee94q5Wi6avnA" name="init" specification="_8b9jYHjjEeakrcXZeNIVKw">
        <language>C/C++</language>
        <body>	mainInstance.press.motor.CppLargeMotorDelegatee.setComponent(&amp;(mainInstance.press.motor));&#xD;
				mainInstance.press.SlavePressDelegatee.setComponent(&amp;(mainInstance.press));&#xD;
				mainInstance.shelf.rack_3.color_sensor.CppColorSensorDelegatee.setComponent(&amp;(mainInstance.shelf.rack_3.color_sensor));&#xD;
				mainInstance.shelf.rack_3.RackDelegatee.setComponent(&amp;(mainInstance.shelf.rack_3));&#xD;
				mainInstance.shelf.rack_2.color_sensor.CppColorSensorDelegatee.setComponent(&amp;(mainInstance.shelf.rack_2.color_sensor));&#xD;
				mainInstance.shelf.rack_2.RackDelegatee.setComponent(&amp;(mainInstance.shelf.rack_2));&#xD;
				mainInstance.shelf.rack_1.color_sensor.CppColorSensorDelegatee.setComponent(&amp;(mainInstance.shelf.rack_1.color_sensor));&#xD;
				mainInstance.shelf.rack_1.RackDelegatee.setComponent(&amp;(mainInstance.shelf.rack_1));&#xD;
				mainInstance.shelf.SlaveShelfDelegatee.setComponent(&amp;(mainInstance.shelf));&#xD;
				mainInstance.robotic_arm.motor_right_left.CppServoMotorDelegatee.setComponent(&amp;(mainInstance.robotic_arm.motor_right_left));&#xD;
				mainInstance.robotic_arm.motor_front_back.CppServoMotorDelegatee.setComponent(&amp;(mainInstance.robotic_arm.motor_front_back));&#xD;
				mainInstance.robotic_arm.motor_up_down.CppServoMotorDelegatee.setComponent(&amp;(mainInstance.robotic_arm.motor_up_down));&#xD;
				mainInstance.robotic_arm.RoofRoboticArmDelegatee.setComponent(&amp;(mainInstance.robotic_arm));&#xD;
				mainInstance.convoyer.color_sensor.CppColorSensorDelegatee.setComponent(&amp;(mainInstance.convoyer.color_sensor));&#xD;
				mainInstance.convoyer.motor.CppLargeMotorDelegatee.setComponent(&amp;(mainInstance.convoyer.motor));&#xD;
				mainInstance.convoyer.RoofConvoyerDelegatee.setComponent(&amp;(mainInstance.convoyer));&#xD;
				mainInstance.control.emergency_button.CppTouchSensorDelegatee.setComponent(&amp;(mainInstance.control.emergency_button));&#xD;
				mainInstance.control.ev3Brick.bluetoothDevice.CppBlutoothDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.bluetoothDevice));&#xD;
				mainInstance.control.ev3Brick.soundDevice.CppSoundDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.soundDevice));&#xD;
				mainInstance.control.ev3Brick.lcdScreen.CppLcdDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.lcdScreen));&#xD;
				mainInstance.control.ev3Brick.okButton.CppButtonDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.okButton));&#xD;
				mainInstance.control.ev3Brick.downButton.CppButtonDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.downButton));&#xD;
				mainInstance.control.ev3Brick.topButton.CppButtonDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.topButton));&#xD;
				mainInstance.control.ev3Brick.rightButton.CppButtonDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.rightButton));&#xD;
				mainInstance.control.ev3Brick.leftButton.CppButtonDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.leftButton));&#xD;
				mainInstance.control.ev3Brick.backButton.CppButtonDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.backButton));&#xD;
				mainInstance.control.ev3Brick.rightRedLed.CppLedDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.rightRedLed));&#xD;
				mainInstance.control.ev3Brick.leftRedLed.CppLedDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.leftRedLed));&#xD;
				mainInstance.control.ev3Brick.rightGreenLed.CppLedDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.rightGreenLed));&#xD;
				mainInstance.control.ev3Brick.leftGreenLed.CppLedDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick.leftGreenLed));&#xD;
				mainInstance.control.ev3Brick.CppEV3BrickDelegatee.setComponent(&amp;(mainInstance.control.ev3Brick));&#xD;
				mainInstance.control.RoofControlComponentDelegatee.setComponent(&amp;(mainInstance.control));&#xD;
			mainInstance.RoofModuleSystemDelegatee.setComponent(&amp;mainInstance);&#xD;
mainInstance.RoofModuleSystemDelegatee.createConnections();&#xD;
&#xD;
mainInstance.control.RoofControlComponentDelegatee.configure_queue_size();&#xD;
mainInstance.control.RoofControlComponentDelegatee.startBehavior();&#xD;
mainInstance.convoyer.RoofConvoyerDelegatee.configure_queue_size();&#xD;
mainInstance.convoyer.RoofConvoyerDelegatee.startBehavior();&#xD;
mainInstance.robotic_arm.RoofRoboticArmDelegatee.configure_queue_size();&#xD;
mainInstance.robotic_arm.RoofRoboticArmDelegatee.startBehavior();&#xD;
mainInstance.shelf.SlaveShelfDelegatee.configure_queue_size();&#xD;
mainInstance.shelf.SlaveShelfDelegatee.startBehavior();&#xD;
mainInstance.press.SlavePressDelegatee.configure_queue_size();&#xD;
mainInstance.press.SlavePressDelegatee.startBehavior();&#xD;
//do we always really need a default infinitive loop?&#xD;
for(;;) {&#xD;
	//do nothing&#xD;
}</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_8b9jYHjjEeakrcXZeNIVKw" name="init" method="_arPysLUYEee94q5Wi6avnA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_CS_KsHjwEeasG4qn4umteA" name="NodeInfo">
      <ownedAttribute xmi:id="_IHT5wHjwEeasG4qn4umteA" name="nodeIndex" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="/LegoCarFactoryRefactoringForSync_defaultNode_RoofModuleSystemDepPlan/model/PrimitiveTypes.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_evLegHjwEeasG4qn4umteA" name="def"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OEuTYHjwEeasG4qn4umteA" name="numberOfNodes" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="/LegoCarFactoryRefactoringForSync_defaultNode_RoofModuleSystemDepPlan/model/PrimitiveTypes.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_cY15QHjwEeasG4qn4umteA" name="def"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_BDsTUHlvEeavUcYMQ2Z1Aw">
      <eAnnotations xmi:id="_BDwkwHlvEeavUcYMQ2Z1Aw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/C_Cpp/1#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://PapyrusC_Cpp_PROFILES/C_Cpp.profile.uml#_j9REUByGEduN1bTiWJ0lyw"/>
    </profileApplication>
  </uml:Model>
  <C_Cpp:Include xmi:id="_aq0U4LUYEee94q5Wi6avnA" body="BootLoaderCpp::BootLoader bootloader;&#xA;&#xA;int main (int argc, const char* argv[])&#xA;{&#xA;&#x9;// store arguments for future access&#xA;&#x9;BootLoaderCpp::BootLoader::argc = argc;&#xA;&#x9;BootLoaderCpp::BootLoader::argv = argv;&#xA;&#xA;&#x9;bootloader.init();&#xA;&#x9;return 0;&#xA;}&#xA;" base_class="_yvoocHhpEealuJVOx0h2iw" base_Classifier="_yvoocHhpEealuJVOx0h2iw"/>
  <C_Cpp:Ptr xmi:id="_aq2xIrUYEee94q5Wi6avnA" base_property="_ET2FoHjkEeakrcXZeNIVKw"/>
  <C_Cpp:Include xmi:id="_clD0ALUYEee94q5Wi6avnA" header="&#xA;#include &quot;LegoCarFactoryRefactoringForSync/Pkg_LegoCarFactoryRefactoringForSync.h&quot;" base_package="_aqzt0LUYEee94q5Wi6avnA"/>
</xmi:XMI>
