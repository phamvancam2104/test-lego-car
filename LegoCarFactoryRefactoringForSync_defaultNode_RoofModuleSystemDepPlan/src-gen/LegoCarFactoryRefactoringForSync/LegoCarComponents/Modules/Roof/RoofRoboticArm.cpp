// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define LegoCarFactoryRefactoringForSync_LegoCarComponents_Modules_Roof_RoofRoboticArm_BODY

/************************************************************
 RoofRoboticArm class body
 ************************************************************/

// include associated header file
#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Roof/RoofRoboticArm.h"

// Derived includes directives
#include "CarFactoryLibrary/CommunicationInterfaces/IRoboticArmFloatMotor.h"
#include "CarFactoryLibrary/Pliers.h"
#include "CarFactoryLibrary/events/DeliveredCarConveyor.h"
#include "CarFactoryLibrary/events/EndOfModule.h"
#include "CarFactoryLibrary/events/RoboticArmPickPiece.h"
#include "LegoCarFactoryRefactoringForSync/signals/GoToPress.h"
#include "LegoCarFactoryRefactoringForSync/signals/RestartAfterEmergencyStop.h"
#include "LegoCarFactoryRefactoringForSync/signals/StopProcess.h"

namespace LegoCarFactoryRefactoringForSync {
namespace LegoCarComponents {
namespace Modules {
namespace Roof {

// static attributes (if any)

/**
 * 
 */
void RoofRoboticArm::stop_motors() {
	float_motors();
}

/**
 * 
 * @param rack_number 
 */
void RoofRoboticArm::deliver_roof(int /*in*/rack_number) {
	if (rack_number != 0) { //means no roof
		//TURN
		move(3, 5, 2, false);
		usleep(900 * 1000);

		//go BEFORE DELIVER
		move(7, 1, 2, false);
		usleep(500 * 1000);

		//go DOWN
		move(7, -0.9, 2, false, 100);
		usleep(500 * 1000);

		//open pliers
		motor_pliers.open();

		//go DOWN
		move(7, -1.1, 2, false, 300);
		usleep(200 * 1000);

		//TURN
		move(7, -1.1, -15, false, 100);
		usleep(500 * 1000);

		//go away
		move(4, -1.1, -15, false, 600);
		usleep(900 * 1000);

		//go UP
		move(3, 2, -15, false, 300);
		usleep(900 * 1000);

		//go away
		move(3, 2, -11.5, false, 300);
		usleep(900 * 1000);

		//TURN
		move(3, 5, 95, false);
		usleep(900 * 1000);

		go_rest_position_rack();
	}
}

/**
 * 
 * @param rack_number 
 */
void RoofRoboticArm::pick_roof(int /*in*/rack_number) {
	if (rack_number == CarFactoryLibrary::RED) {
		//go to REST
		go_rest_position_rack();

		//TURN
		move(7, 5, 73, true, 100);
		usleep(200 * 1000);

		//go to BEFORE PICK PART
		move(4.8, 0, 73, true, 100);
		usleep(500 * 1000);

		//go DOWN
		move(4.6, -2.3, 73, true, 100);
		usleep(500 * 1000);

		//TURN
		move(4.6, -2.3, 92, true, 100);
		usleep(500 * 1000);

		//CLOSE PLIERS
		motor_pliers.close();

		//go UP
		move(4.6, 2, 92, true, 100);
		usleep(500 * 1000);

		//go to Turn position (not REST because the press is on the way of)
		move(3, 5, 92, false);
		usleep(900 * 1000);
	} else if (rack_number == CarFactoryLibrary::WHITE) {
		//go to REST
		go_rest_position_rack();

		//TURN
		move(7, 5, 77, true, 100);
		usleep(200 * 1000);

		//go to BEFORE PICK PART
		move(9.3, 0, 77, true, 100);
		usleep(500 * 1000);

		//go DOWN
		move(9.3, -2.9, 77, true, 100);
		usleep(500 * 1000);

		//TURN
		move(9.3, -2.9, 91, true, 100);
		usleep(500 * 1000);

		//CLOSE PLIERS
		motor_pliers.close();

		//go UP
		move(9.3, 2, 91, true, 100);
		usleep(500 * 1000);

		//go to Turn position (not REST because the press is on the way of)
		move(3, 5, 95, false);
		usleep(900 * 1000);
	} else if (rack_number == CarFactoryLibrary::BLUE) {
		//go to REST
		go_rest_position_rack();

		//TURN
		move(7, 5, 80.5, true, 100);
		usleep(200 * 1000);

		//go to BEFORE PICK PART
		move(13.5, 0, 80.5, true, 100);
		usleep(500 * 1000);

		//go DOWN
		move(14, -3, 80.5, true, 100);
		usleep(500 * 1000);

		//TURN
		move(13.8, -3, 90, true, 100);
		usleep(500 * 1000);

		//CLOSE PLIERS
		motor_pliers.close();

		//go UP
		move(13.8, 2, 90, false);
		usleep(500 * 1000);

		//go to Turn position (not REST because the press is on the way of)
		move(3, 5, 95, false);
		usleep(900 * 1000);
	}
}

/**
 * 
 */
RoofRoboticArm::RoofRoboticArm() {
}

/**
 * 
 * @param sig 
 */
void RoofRoboticArm::save_rack_number(
		::CarFactoryLibrary::events::RoboticArmPickPiece& /*in*/sig) {
	rack_number = sig.rack_number;
}

/**
 * 
 */
void RoofRoboticArm::init() {
	run_motors();
	motor_pliers.open();
	go_rest_position_rack();
	float_motors();
}

/**
 * 
 */
void RoofRoboticArm::start_motors() {
	pLCD.requiredIntf->clear();		//get_module()->ev3Brick.lcdScreen.clear();
	pLCD.requiredIntf->write_text(0, 20, "Pick place...", lcd::TextSize::LARGE);

	run_motors();
}

/**
 * 
 */
void RoofRoboticArm::pick_roof() {
	pick_roof (rack_number);
}

/**
 * 
 */
void RoofRoboticArm::deliver_roof() {
	deliver_roof (rack_number);
}

/**
 * 
 */
void RoofRoboticArm::sendGoToPressEvent() {
	LegoCarFactoryRefactoringForSync::signals::GoToPress s;
	s.color = static_cast<CarFactoryLibrary::Colors>(rack_number);
	pOutGotoProcess.outIntf->push(s);//static_cast<RoofConveyor*>(get_conveyor())->sendGoToPress(s);
}

} // of namespace Roof
} // of namespace Modules
} // of namespace LegoCarComponents
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
 End of RoofRoboticArm class body
 ************************************************************/
