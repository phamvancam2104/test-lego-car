// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef LEGOCARFACTORYREFACTORINGFORSYNC_LEGOCARCOMPONENTS_MODULES_ROOF_ROOFROBOTICARM_H
#define LEGOCARFACTORYREFACTORINGFORSYNC_LEGOCARCOMPONENTS_MODULES_ROOF_ROOFROBOTICARM_H

/************************************************************
 RoofRoboticArm class header
 ************************************************************/

#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Roof/Pkg_Roof.h"

#include "AnsiCLibrary/Pkg_AnsiCLibrary.h"
#include "CarFactoryLibrary/RoboticArm.h"
#include "LegoCarFactoryRefactoringForSync/__Architecture__Delegatee/Roof/RoofRoboticArm__Delegatee.h"

// Include from Include stereotype (header)
using namespace CarFactoryLibrary;
#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Roof/Pkg_Roof.h"
#include "AnsiCLibrary/Pkg_AnsiCLibrary.h"
#include "CarFactoryLibrary/RoboticArm.h"
#include "LegoCarFactoryRefactoringForSync/__Architecture__Controller/RoofRoofRoboticArm__Controller.h"
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class RestartAfterEmergencyStop;
}
}
namespace CarFactoryLibrary {
namespace events {
class EndOfModule;
}
}
namespace CarFactoryLibrary {
namespace events {
class RoboticArmPickPiece;
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class StopProcess;
}
}
namespace CarFactoryLibrary {
namespace CommunicationInterfaces {
class IRoboticArmFloatMotor;
}
}
#include "CarFactoryLibrary/CommunicationInterfaces/IRoboticArmFloatMotor.h"
namespace EV3PapyrusLibrary {
namespace Interfaces {
namespace Actuators {
class IServoMotor;
}
}
}
namespace CarFactoryLibrary {
namespace events {
class DeliveredCarConveyor;
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class GoToPress;
}
}

// End of Include stereotype (header)

namespace CarFactoryLibrary {
namespace events {
class RoboticArmPickPiece;
}
}

namespace LegoCarFactoryRefactoringForSync {
namespace LegoCarComponents {
namespace Modules {
namespace Roof {

/************************************************************/
/**
 * 
 */
class RoofRoboticArm: public ::CarFactoryLibrary::RoboticArm {
public:
	DECLARE_DELEGATEE_COMPONENT (RoofRoboticArm)

	StateMachine RoofRoboticArmStateMachine {
		InitialState PrincipalState {
			InitialState Initialization {
				StateEntry init();
			};
			State StartMotors {
				StateEntry start_motors();
			};
			State PickRoof {
				StateEntry pick_roof();
			};
			State DeliverRoof {
				StateEntry deliver_roof();
				StateDoActivity sendGoToPressEvent ();
			};
			State Finalization {
				StateEntry stop_motors();
			};
		};
		State Restart {
		};
		SignalEvent(LegoCarFactoryRefactoringForSync::signals::StopProcess) StopProcess;
		SignalEvent(LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop) RestartAfterEmergencyStop;
		SignalEvent(CarFactoryLibrary::events::RoboticArmPickPiece) RoboticArmPickPiece;
		SignalEvent(CarFactoryLibrary::events::EndOfModule) EndOfModule;
		TransitionTable {
			//using namespace for vertices
			//For external transtition: ExT(name, source, target, guard, event, effect)
			//For local transtition: LoT(name, source, target, guard, event, effect)
			//For internal transtition: ExT(name, source, guard, event, effect)
			ExT(fromPrincipalStatetoRestart, PrincipalState, Restart, NULL, StopProcess, NULL);
			ExT(fromInitializationtoStartMotors, Initialization, StartMotors, NULL, RoboticArmPickPiece, save_rack_number);
			ExT(fromStartMotorstoPickRoof, StartMotors, PickRoof, NULL, void, NULL);
			ExT(fromPickRooftoDeliverRoof, PickRoof, DeliverRoof, NULL, void, NULL);
			ExT(fromDeliverRooftoFinalization, DeliverRoof, Finalization, NULL, void, NULL);
			ExT(fromFinalizationtoInitialization, Finalization, Initialization, NULL, EndOfModule, NULL);
			ExT(fromRestarttoPrincipalState, Restart, PrincipalState, NULL, RestartAfterEmergencyStop, NULL);
		};
	};
	/**
	 * 
	 */
	InFlowPort<
			LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop> pInRestart;
	/**
	 * 
	 */
	InFlowPort<CarFactoryLibrary::events::EndOfModule> pEndOfMo;
	/**
	 * 
	 */
	InFlowPort<CarFactoryLibrary::events::RoboticArmPickPiece> pPickPiece;
	/**
	 * 
	 */
	InFlowPort<LegoCarFactoryRefactoringForSync::signals::StopProcess> pInStopProcess;
	/**
	 * 
	 */
	ProvidedPort<
			CarFactoryLibrary::CommunicationInterfaces::IRoboticArmFloatMotor> pFloatMotor;
	/**
	 * 
	 */
	OutFlowPort<CarFactoryLibrary::events::DeliveredCarConveyor> pDelivered;
	/**
	 * 
	 */
	OutFlowPort<LegoCarFactoryRefactoringForSync::signals::GoToPress> pOutGotoProcess;
	/**
	 * 
	 */
	void stop_motors();
	/**
	 * 
	 * @param rack_number 
	 */
	void deliver_roof(int /*in*/rack_number);
	/**
	 * 
	 * @param rack_number 
	 */
	void pick_roof(int /*in*/rack_number);
	/**
	 * 
	 */
	RoofRoboticArm();
	/**
	 * 
	 * @param sig 
	 */
	void save_rack_number(
			::CarFactoryLibrary::events::RoboticArmPickPiece& /*in*/sig);
	/**
	 * 
	 */
	void init();
	/**
	 * 
	 */
	void start_motors();
	/**
	 * 
	 */
	void pick_roof();
	/**
	 * 
	 */
	void deliver_roof();
	/**
	 * 
	 */
	void sendGoToPressEvent();

};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of namespace Roof
} // of namespace Modules
} // of namespace LegoCarComponents
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
 End of RoofRoboticArm class header
 ************************************************************/

#endif
