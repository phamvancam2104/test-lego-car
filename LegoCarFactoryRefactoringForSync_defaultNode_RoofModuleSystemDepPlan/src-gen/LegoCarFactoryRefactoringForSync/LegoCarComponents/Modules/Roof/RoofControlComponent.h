// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef LEGOCARFACTORYREFACTORINGFORSYNC_LEGOCARCOMPONENTS_MODULES_ROOF_ROOFCONTROLCOMPONENT_H
#define LEGOCARFACTORYREFACTORINGFORSYNC_LEGOCARCOMPONENTS_MODULES_ROOF_ROOFCONTROLCOMPONENT_H

/************************************************************
 RoofControlComponent class header
 ************************************************************/

#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Roof/Pkg_Roof.h"

#include "AnsiCLibrary/Pkg_AnsiCLibrary.h"
#include "CarFactoryLibrary/Module.h"
#include "CarFactoryLibrary/Pkg_CarFactoryLibrary.h"
#include "EV3PapyrusLibrary/Types/Pkg_Types.h"
#include "LegoCarFactoryRefactoringForSync/__Architecture__Delegatee/Roof/RoofControlComponent__Delegatee.h"

// Include from Include stereotype (header)
using namespace CarFactoryLibrary;
namespace CarFactoryLibrary {
namespace events {
class ErrorDetection;
}
}
namespace CarFactoryLibrary {
namespace events {
class EndOfModule;
}
}
namespace EV3PapyrusLibrary {
namespace Interfaces {
namespace EV3Brick {
class ILcd;
}
}
}
namespace CarFactoryLibrary {
class IModule;
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class StopProcess;
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class RestartAfterEmergencyStop;
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class PrepareConveyor;
}
}
namespace CarFactoryLibrary {
namespace events {
class DeliveredCarConveyor;
}
}
namespace CarFactoryLibrary {
namespace events {
class CheckRack;
}
}
#include "CarFactoryLibrary/CommunicationInterfaces/IRoboticArmFloatMotor.h"
#include "EV3PapyrusLibrary/Interfaces/Actuators/ILargeMotor.h"

// End of Include stereotype (header)

namespace CarFactoryLibrary {
namespace events {
class ErrorDetection;
}
}

namespace LegoCarFactoryRefactoringForSync {
namespace LegoCarComponents {
namespace Modules {
namespace Roof {

/************************************************************/
/**
 * 
 */
class RoofControlComponent: public ::CarFactoryLibrary::Module {
public:
	/**
	 * 
	 */
	::CarFactoryLibrary::BluetoothMasterEnum msg;
	/**
	 * 
	 */
	::EV3PapyrusLibrary::Types::LocalString extra_msg;
	/**
	 * 
	 */
	::CarFactoryLibrary::Colors color;
	DECLARE_DELEGATEE_COMPONENT (RoofControlComponent)

	StateMachine RoofControlStateMachine {
		InitialState Initialization {
			StateEntry init();
		};
		State PrincipalState {
			Region Region1 {
				InitialState EmnergencyStopState {
					InitialState Check {
						StateDoActivity doActivityCheck ();
					};
					PseudoChoice wait {};
					State EmergencyButtonPress {
						StateEntry sendStopProcessEvent();
					};
				};
				State Misplace {
					StateEntry sendStopProcess();
				};
				State Restart {
					StateEntry send_restart_event();
				};
				State ShowStopGUI {
					StateEntry show_stop_GUI();
				};
				PseudoChoice choice2 {};
				PseudoChoice choice1 {};
			};
			Region Region2 {
				InitialState CheckMessage {
					StateDoActivity read ();
				};
				State Reset {
					StateEntry reset();
				};
				PseudoChoice choice {};
				State Ping {
					StateEntry ping_response();
				};
				State GetStatus {
					StateEntry get_status_response();
				};
				State LoadCar {
					StateEntry sendPrepareConveyorEvent();
				};
				State Deliver {
					StateEntry deliver();
				};
				State Rewind {
					StateEntry rewind();
				};
				State Assemble {
					StateEntry send_check_racks_event();
				};
			};
		};
		FinalState FinalState1 {
		};
		SignalEvent(CarFactoryLibrary::events::EndOfModule) EndOfModule;
		SignalEvent(CarFactoryLibrary::events::ErrorDetection) ErrorDetection;
		TimeEvent(50) TE_50_ms_ {};
		TransitionTable {
			//using namespace for vertices
			//For external transtition: ExT(name, source, target, guard, event, effect)
			//For local transtition: LoT(name, source, target, guard, event, effect)
			//For internal transtition: ExT(name, source, guard, event, effect)
			ExT(fromInitializationtoPrincipalState, Initialization, PrincipalState, fromInitializationtoPrincipalStateGuard, void, NULL);
			ExT(fromEmnergencyStopStatetoEmnergencyStopState, EmnergencyStopState, EmnergencyStopState, NULL, EndOfModule, NULL);
			ExT(fromEmnergencyStopStatetoMisplace, EmnergencyStopState, Misplace, NULL, ErrorDetection, effectFromEmnergencyStopStatetoMisplace);
			ExT(fromChecktoWait, Check, wait, NULL, void, NULL);
			ExT(fromEmergencyButtonPresstoShowStopGUI, EmergencyButtonPress, ShowStopGUI, NULL, void, NULL);
			ExT(fromMisplacetoChoice2, Misplace, choice2, NULL, void, NULL);
			ExT(fromRestarttoEmnergencyStopState, Restart, EmnergencyStopState, NULL, void, NULL);
			ExT(fromShowStopGUItoChoice1, ShowStopGUI, choice1, NULL, void, NULL);
			ExT(fromCheckMessagetoChoice, CheckMessage, choice, NULL, void, NULL);
			ExT(fromResettoCheckMessage, Reset, CheckMessage, NULL, void, NULL);
			ExT(fromPingtoCheckMessage, Ping, CheckMessage, NULL, void, NULL);
			ExT(fromGetStatustoCheckMessage, GetStatus, CheckMessage, NULL, void, NULL);
			ExT(fromLoadCartoCheckMessage, LoadCar, CheckMessage, NULL, void, NULL);
			ExT(fromDelivertoCheckMessage, Deliver, CheckMessage, NULL, void, NULL);
			ExT(fromRewindtoCheckMessage, Rewind, CheckMessage, NULL, void, NULL);
			ExT(fromAssembletoCheckMessage, Assemble, CheckMessage, NULL, void, NULL);
			ExT(fromWaittoCheck, wait, Check, NULL, TE_50_ms_, NULL);
			ExT(fromWaittoEmergencyButtonPress, wait, EmergencyButtonPress, fromWaittoEmergencyButtonPressGuard, void, NULL);
			ExT(fromChoice2toMisplace, choice2, Misplace, NULL, void, NULL);
			ExT(fromChoice2toRestart, choice2, Restart, fromChoice2toRestartGuard, void, NULL);
			ExT(fromChoice1toRestart, choice1, Restart, fromChoice1toRestartGuard, void, NULL);
			ExT(fromChoice1toShowStopGUI, choice1, ShowStopGUI, NULL, void, NULL);
			ExT(fromChoicetoPing, choice, Ping, fromChoicetoPingGuard, void, NULL);
			ExT(fromChoicetoGetStatus, choice, GetStatus, fromChoicetoGetStatusGuard, void, NULL);
			ExT(fromChoicetoLoadCar, choice, LoadCar, fromChoicetoLoadCarGuard, void, NULL);
			ExT(fromChoicetoCheckMessage, choice, CheckMessage, NULL, void, NULL);
			ExT(fromChoicetoDeliver, choice, Deliver, fromChoicetoDeliverGuard, void, NULL);
			ExT(fromChoicetoRewind, choice, Rewind, fromChoicetoRewindGuard, void, NULL);
			ExT(fromChoicetoAssemble, choice, Assemble, fromChoicetoAssembleGuard, void, NULL);
			ExT(fromChoicetoReset, choice, Reset, fromChoicetoResetGuard, void, NULL);
			ExT(fromChoicetoFinalState1, choice, FinalState1, fromChoicetoFinalState1Guard, void, NULL);
		};
	};
	/**
	 * 
	 */
	InFlowPort<CarFactoryLibrary::events::ErrorDetection> pErrDetect;
	/**
	 * 
	 */
	InFlowPort<CarFactoryLibrary::events::EndOfModule> pEndOfMo;
	/**
	 * 
	 */
	OutFlowPort<LegoCarFactoryRefactoringForSync::signals::StopProcess> pOutStopProcess_Shelf;
	/**
	 * 
	 */
	OutFlowPort<LegoCarFactoryRefactoringForSync::signals::StopProcess> pOutStopProcess_RoboticArm;
	/**
	 * 
	 */
	OutFlowPort<LegoCarFactoryRefactoringForSync::signals::StopProcess> pStopProcess_Convoyer;
	/**
	 * 
	 */
	OutFlowPort<
			LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop> pOutRestart_Shelf;
	/**
	 * 
	 */
	OutFlowPort<
			LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop> pOutRestart_Convoyer;
	/**
	 * 
	 */
	OutFlowPort<
			LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop> pOutRestart_Robotic;
	/**
	 * 
	 */
	OutFlowPort<LegoCarFactoryRefactoringForSync::signals::PrepareConveyor> pPrepare;
	/**
	 * 
	 */
	OutFlowPort<LegoCarFactoryRefactoringForSync::signals::StopProcess> pStopProcess_Press;
	/**
	 * 
	 */
	OutFlowPort<
			LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop> pOutRestart_Press;
	/**
	 * 
	 */
	OutFlowPort<CarFactoryLibrary::events::DeliveredCarConveyor> pOutDelivered;
	/**
	 * 
	 */
	OutFlowPort<CarFactoryLibrary::events::CheckRack> pOutCheckRack;
	/**
	 * 
	 */
	RequiredPort<
			CarFactoryLibrary::CommunicationInterfaces::IRoboticArmFloatMotor> pFloatMotor;
	/**
	 * 
	 */
	RequiredPort<EV3PapyrusLibrary::Interfaces::Actuators::ILargeMotor> pLargeMotor_Convoyer;
	/**
	 * 
	 */
	RequiredPort<EV3PapyrusLibrary::Interfaces::Actuators::ILargeMotor> pLargeMotor_Press;
	/**
	 * 
	 */
	void send_check_racks_event();
	/**
	 * 
	 * @return ret 
	 */
	bool init_bluetooth_communication();
	/**
	 * 
	 */
	RoofControlComponent();
	/**
	 * 
	 * @param sig 
	 */
	void effectFromEmnergencyStopStatetoMisplace(
			::CarFactoryLibrary::events::ErrorDetection& /*in*/sig);
	/**
	 * 
	 * @return ret 
	 */
	bool fromWaittoEmergencyButtonPressGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoice2toRestartGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoice1toRestartGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoicetoPingGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoicetoGetStatusGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoicetoLoadCarGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoicetoDeliverGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoicetoRewindGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoicetoAssembleGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoicetoResetGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoicetoFinalState1Guard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromInitializationtoPrincipalStateGuard();
	/**
	 * 
	 */
	void init();
	/**
	 * 
	 */
	void doActivityCheck();
	/**
	 * 
	 */
	void sendStopProcessEvent();
	/**
	 * 
	 */
	void sendStopProcess();
	/**
	 * 
	 */
	void send_restart_event();
	/**
	 * 
	 */
	void show_stop_GUI();
	/**
	 * 
	 */
	void read();
	/**
	 * 
	 */
	void reset();
	/**
	 * 
	 */
	void ping_response();
	/**
	 * 
	 */
	void get_status_response();
	/**
	 * 
	 */
	void sendPrepareConveyorEvent();
	/**
	 * 
	 */
	void deliver();
	/**
	 * 
	 */
	void rewind();

};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of namespace Roof
} // of namespace Modules
} // of namespace LegoCarComponents
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
 End of RoofControlComponent class header
 ************************************************************/

#endif
