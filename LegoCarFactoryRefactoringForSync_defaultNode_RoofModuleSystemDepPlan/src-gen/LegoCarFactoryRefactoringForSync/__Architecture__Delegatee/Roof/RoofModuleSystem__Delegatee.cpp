// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define LegoCarFactoryRefactoringForSync___Architecture__Delegatee_Roof_RoofModuleSystem__Delegatee_BODY

/************************************************************
 RoofModuleSystem__Delegatee class body
 ************************************************************/

// include associated header file
#include "LegoCarFactoryRefactoringForSync/__Architecture__Delegatee/Roof/RoofModuleSystem__Delegatee.h"

// Derived includes directives
#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Roof/RoofModuleSystem.h"

namespace LegoCarFactoryRefactoringForSync {
namespace __Architecture__Delegatee {
namespace Roof {

// static attributes (if any)

/**
 * 
 * @param comp 
 */
void RoofModuleSystem__Delegatee::setComponent(
		::LegoCarFactoryRefactoringForSync::LegoCarComponents::Modules::Roof::RoofModuleSystem* /*in*/comp) {
	this->component = comp;
}

/**
 * 
 */
RoofModuleSystem__Delegatee::RoofModuleSystem__Delegatee() {
}

/**
 * 
 */
void RoofModuleSystem__Delegatee::createConnections() {
	// realization of connector <connector_pDelivered_to_pDelivered_DeliveredCarConveyor>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->robotic_arm.RoofRoboticArmDelegatee.connect_pDelivered(
					component->convoyer.RoofConvoyerDelegatee.get_pDelivered());
		}
	}
	// realization of connector <connector_pOutStopProcess_Shelf_to_pInStopProcess_StopProcess>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pOutStopProcess_Shelf(
					component->shelf.SlaveShelfDelegatee.get_pInStopProcess());
		}
	}
	// realization of connector <connector_pOutStopProcess_RoboticArm_to_pInStopProcess_StopProcess>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pOutStopProcess_RoboticArm(
					component->robotic_arm.RoofRoboticArmDelegatee.get_pInStopProcess());
		}
	}
	// realization of connector <connector_pStopProcess_Convoyer_to_pInStopProcess_StopProcess>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pStopProcess_Convoyer(
					component->convoyer.RoofConvoyerDelegatee.get_pInStopProcess());
		}
	}
	// realization of connector <connector_pOutRestart_Shelf_to_pInRestart_RestartAfterEmergencyStop>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pOutRestart_Shelf(
					component->shelf.SlaveShelfDelegatee.get_pInRestart());
		}
	}
	// realization of connector <connector_pOutRestart_Convoyer_to_pRestart_RestartAfterEmergencyStop>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pOutRestart_Convoyer(
					component->convoyer.RoofConvoyerDelegatee.get_pRestart());
		}
	}
	// realization of connector <connector_pOutRestart_Robotic_to_pInRestart_RestartAfterEmergencyStop>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pOutRestart_Robotic(
					component->robotic_arm.RoofRoboticArmDelegatee.get_pInRestart());
		}
	}
	// realization of connector <connector_pCheckRack_to_pCheckRack_CheckRack>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->convoyer.RoofConvoyerDelegatee.connect_pCheckRack(
					component->shelf.SlaveShelfDelegatee.get_pCheckRack());
		}
	}
	// realization of connector <connector_pErrDetect_to_pErrDetect_ErrorDetection>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->shelf.SlaveShelfDelegatee.connect_pErrDetect(
					component->control.RoofControlComponentDelegatee.get_pErrDetect());
		}
	}
	// realization of connector <connector_pEndOfMo_to_pEndOfMo_Control_EndOfModule>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->convoyer.RoofConvoyerDelegatee.connect_pEndOfMo_Control(
					component->control.RoofControlComponentDelegatee.get_pEndOfMo());
		}
	}
	// realization of connector <connector_pEndOfMo_Shelf_to_pEndOfMo_EndOfModule>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->convoyer.RoofConvoyerDelegatee.connect_pEndOfMo_Shelf(
					component->shelf.SlaveShelfDelegatee.get_pEndOfMo());
		}
	}
	// realization of connector <connector_pEndOfMo_to_pEndOfMo_Robotic_EndOfModule>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->convoyer.RoofConvoyerDelegatee.connect_pEndOfMo_Robotic(
					component->robotic_arm.RoofRoboticArmDelegatee.get_pEndOfMo());
		}
	}
	// realization of connector <connector_pPickPiece_to_pPickPiece_RoboticArmPickPiece>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->shelf.SlaveShelfDelegatee.connect_pPickPiece(
					component->robotic_arm.RoofRoboticArmDelegatee.get_pPickPiece());
		}
	}
	// realization of connector <connector_pFloatMotor_to_pFloatMotor_IRoboticArmFloatMotor>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pFloatMotor(
					component->robotic_arm.RoofRoboticArmDelegatee.get_pFloatMotor());
		}
	}
	// realization of connector <connector_pLargeMotor_Convoyer_to_pLargeMotor_ILargeMotor>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pLargeMotor_Convoyer(
					component->convoyer.RoofConvoyerDelegatee.get_pLargeMotor());
		}
	}
	// realization of connector <connector_pLargeMotor_Press_to_pILargeMotor_ILargeMotor>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pLargeMotor_Press(
					component->press.SlavePressDelegatee.get_pILargeMotor());
		}
	}
	// realization of connector <connector_pStopProcess_Press_to_pInStopProcess_StopProcess>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pStopProcess_Press(
					component->press.SlavePressDelegatee.get_pInStopProcess());
		}
	}
	// realization of connector <connector_pOutRestart_Press_to_pInRestart_RestartAfterEmergencyStop>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pOutRestart_Press(
					component->press.SlavePressDelegatee.get_pInRestart());
		}
	}
	// realization of connector <connector_pOutDelivered_to_pDelivered_DeliveredCarConveyor>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pOutDelivered(
					component->convoyer.RoofConvoyerDelegatee.get_pDelivered());
		}
	}
	// realization of connector <connector_pOutCheckRack_to_pCheckRack_CheckRack>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->control.RoofControlComponentDelegatee.connect_pOutCheckRack(
					component->shelf.SlaveShelfDelegatee.get_pCheckRack());
		}
	}
	// realization of connector <connector_pPressAssemble_to_pPressAssemble_PressAssemble>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->convoyer.RoofConvoyerDelegatee.connect_pPressAssemble(
					component->press.SlavePressDelegatee.get_pPressAssemble());
		}
	}
	// realization of connector <connector_pEndOfMo_Press_to_pEndOfMo_EndOfModule>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->convoyer.RoofConvoyerDelegatee.connect_pEndOfMo_Press(
					component->press.SlavePressDelegatee.get_pEndOfMo());
		}
	}
	// realization of connector <connector_pOutGotoProcess_to_pGotoProcess_GoToPress>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->robotic_arm.RoofRoboticArmDelegatee.connect_pOutGotoProcess(
					component->convoyer.RoofConvoyerDelegatee.get_pGotoProcess());
		}
	}
}

} // of namespace Roof
} // of namespace __Architecture__Delegatee
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
 End of RoofModuleSystem__Delegatee class body
 ************************************************************/
