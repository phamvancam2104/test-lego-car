// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef LEGOCARFACTORYREFACTORINGFORSYNC___ARCHITECTURE__DELEGATEE_ROOF_ROOFCONVOYER__DELEGATEE_H
#define LEGOCARFACTORYREFACTORINGFORSYNC___ARCHITECTURE__DELEGATEE_ROOF_ROOFCONVOYER__DELEGATEE_H

/************************************************************
 RoofConvoyer__Delegatee class header
 ************************************************************/

#include "LegoCarFactoryRefactoringForSync/__Architecture__Delegatee/Roof/Pkg_Roof.h"

#include "AnsiCLibrary/Pkg_AnsiCLibrary.h"
#include "pthread.h"
#include "statemachine/EventQueueAllocationConfiguration.h"
#include "statemachine/Pkg_statemachine.h"
#include "statemachine/StructForThread_t.h"

// Include from Include stereotype (header)
#define ROOFCONVOYER__DELEGATEE_TIME_EVENT_LOWER_BOUND (0)
#define ROOFCONVOYER__DELEGATEE_CHANGE_EVENT_LOWER_BOUND (0)
#define ROOFCONVOYER__DELEGATEE_TE_INDEX(id) (id - ROOFCONVOYER__DELEGATEE_TIME_EVENT_LOWER_BOUND)
#define ROOFCONVOYER__DELEGATEE_CHE_INDEX(id) (id - ROOFCONVOYER__DELEGATEE_CHANGE_EVENT_LOWER_BOUND)
#define ROOFCONVOYER_ROOFCONVEYORSTATEMACHINE_REGION1_DEFAULT (0)
#define ROOFCONVOYER_PRINCIPALSTATE_REGION1_DEFAULT (0)
#define ROOFCONVOYER_ROOFCONVEYORSTATEMACHINE_REGION1 (0)
#define ROOFCONVOYER_PRINCIPALSTATE_REGION1 (1)
#include "time.h"
#include "pthread.h"
//the termination of doActivity is implemented in terms of check points that the developers write
//fine-grained code to explicitly use check points to exit doActivity
#ifdef CHECKPOINT 
#undef CHECKPOINT
#endif
#define CHECKPOINT if (roofconvoyerController.systemState == statemachine::EVENT_PROCESSING || roofconvoyerController.systemState == statemachine::STOPPED) {return;}
#define RoofConvoyer__Delegatee_THREAD_CREATE(thThread, str) pthread_create(&thThread, NULL, &RoofConvoyer__Delegatee::thread_func_wrapper, &str);
#define ROOFCONVOYER__DELEGATEE_GET_CONTROL /*mutex synchronization to protect run-to-completion semantics*/ \
		while (!dispatchFlag) {} \
		pthread_mutex_lock(&runToCompletionMutex); \
		while (systemState != statemachine::IDLE || eventQueue.getCompletionSize() > 0) {\
			pthread_cond_wait(&runToCompletionCond, &runToCompletionMutex);\
		}
#define ROOFCONVOYER__DELEGATEE_RELEASE_CONTROL systemState = statemachine::IDLE; pthread_cond_signal(&runToCompletionCond); \
				pthread_mutex_unlock(&runToCompletionMutex);
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class StopProcess;
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class RestartAfterEmergencyStop;
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class PrepareConveyor;
}
}
namespace CarFactoryLibrary {
namespace events {
class DeliveredCarConveyor;
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class GoToPress;
}
}
namespace CarFactoryLibrary {
namespace events {
class CheckRack;
}
}
namespace CarFactoryLibrary {
namespace events {
class ErrorDetection;
}
}
namespace CarFactoryLibrary {
namespace events {
class EndOfModule;
}
}
namespace CarFactoryLibrary {
namespace events {
class PressAssemble;
}
}
using namespace LegoCarFactoryRefactoringForSync::__Architecture__Delegatee::Roof;

// End of Include stereotype (header)

namespace CarFactoryLibrary {
class IModule;
}
namespace CarFactoryLibrary {
namespace events {
class DeliveredCarConveyor;
}
}
namespace EV3PapyrusLibrary {
class IColorSensor;
}
namespace EV3PapyrusLibrary {
namespace Interfaces {
namespace Actuators {
class ILargeMotor;
}
}
}
namespace EV3PapyrusLibrary {
namespace Interfaces {
namespace EV3Brick {
class ILcd;
}
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace LegoCarComponents {
namespace Modules {
namespace Roof {
class RoofConvoyer;
}
}
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class GoToPress;
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class PrepareConveyor;
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class RestartAfterEmergencyStop;
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class StopProcess;
}
}

namespace LegoCarFactoryRefactoringForSync {
namespace __Architecture__Delegatee {
namespace Roof {

/************************************************************/
/**
 * 
 */
class RoofConvoyer__Delegatee: public IPush<
		LegoCarFactoryRefactoringForSync::signals::StopProcess>,
		public IPush<CarFactoryLibrary::events::DeliveredCarConveyor>,
		public IPush<LegoCarFactoryRefactoringForSync::signals::PrepareConveyor>,
		public IPush<
				LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop>,
		public IPush<LegoCarFactoryRefactoringForSync::signals::GoToPress>,
		public ::statemachine::EventQueueAllocationConfiguration {
public:
	/**
	 * 
	 */
	typedef struct State_t {
		bool hasDoActivity;
		//1 is configured as the maximum number of orthogonal regions a composite states can have
		unsigned int actives[1];
		//void (RoofConvoyer__Delegatee::*entry)();
		//void (RoofConvoyer__Delegatee::*exit)();
		//void (RoofConvoyer__Delegatee::*doActivity)();
		State_t() {
			hasDoActivity = false;
			//entry = &RoofConvoyer__Delegatee::entry_dft;
			//exit = &RoofConvoyer__Delegatee::exit_dft;
			//doActivity = &RoofConvoyer__Delegatee::doActivity_dft;
			for (int i = 0; i < 1; i++) {

				actives[i] = STATE_MAX;
			}
		}
	} State_t;

	/**
	 * 
	 */
	enum StateIDEnum {
		/**
		 * 
		 */
		PRINCIPALSTATE_ID,
		/**
		 * 
		 */
		GOINITIALPOSITION_ID,
		/**
		 * 
		 */
		MOVEFORWARD_ID,
		/**
		 * 
		 */
		GOWAITPOSITION_ID,
		/**
		 * 
		 */
		REPLACE_ID,
		/**
		 * 
		 */
		DELIVERCAR_ID,
		/**
		 * 
		 */
		SENDENDOFMODULEEVENT_ID,
		/**
		 * 
		 */
		SENDPRESSASSEMBLEEVENT_ID,
		/**
		 * 
		 */
		GOCHECKPRESENCEPOSITION_ID,
		/**
		 * 
		 */
		SENDREADY_ID,
		/**
		 * 
		 */
		MISPLACE_ID,
		/**
		 * 
		 */
		RESTART_ID,
		/**
		 * 
		 */
		STATE_MAX
	};
	/**
	 * 
	 */
	enum EventId_t {
		/**
		 * 
		 */
		STOPPROCESS_ID,
		/**
		 * 
		 */
		DELIVEREDCARCONVEYOR_ID,
		/**
		 * 
		 */
		PREPARECONVEYOR_ID,
		/**
		 * 
		 */
		RESTARTAFTEREMERGENCYSTOP_ID,
		/**
		 * 
		 */
		GOTOPRESS_ID,
		/**
		 * 
		 */
		COMPLETIONEVENT_ID
	};
	/**
	 * 
	 */
	typedef void (RoofConvoyer__Delegatee::*FptPointer)();

	/**
	 * 
	 */
	::statemachine::SystemStateEnum_t systemState;
	/**
	 * 
	 */
	::LegoCarFactoryRefactoringForSync::__Architecture__Delegatee::Roof::RoofConvoyer__Delegatee::State_t states[12];
	/**
	 * 
	 */
	::LegoCarFactoryRefactoringForSync::__Architecture__Delegatee::Roof::RoofConvoyer__Delegatee::StateIDEnum activeStateID;
	/**
	 * 
	 */
	bool dispatchFlag;
	/**
	 * 
	 */
	int Choice1_CompletionEvent;
	/**
	 * 
	 */
	int choice_CompletionEvent;
	/**
	 * 
	 */
	pthread_t threads[STATE_MAX];
	/**
	 * 
	 */
	bool flags[STATE_MAX];
	/**
	 * 
	 */
	pthread_cond_t conds[STATE_MAX];
	/**
	 * 
	 */
	pthread_mutex_t mutexes[STATE_MAX];
	/**
	 * 
	 */
	::statemachine::StructForThread_t threadStructs[STATE_MAX];
	/**
	 * 
	 */
	pthread_t dispatchThread;
	/**
	 * 
	 */
	::statemachine::StructForThread_t dispatchStruct;
	/**
	 * 
	 */
	pthread_mutex_t runToCompletionMutex;
	/**
	 * 
	 */
	pthread_cond_t runToCompletionCond;
	/**
	 * 
	 */
	void dispatchEvent();
	/**
	 * 
	 * @param enter_mode 
	 */
	void RoofConveyorStateMachine_Region1_Enter(char /*in*/enter_mode);
	/**
	 * 
	 * @param enter_mode 
	 */
	void PrincipalState_Region1_Enter(char /*in*/enter_mode);
	/**
	 * 
	 */
	void PrincipalState_Region1_Exit();
	/**
	 * 
	 */
	RoofConvoyer__Delegatee();
	/**
	 * 
	 */
	void startBehavior();
	/**
	 * 
	 */
	~RoofConvoyer__Delegatee();
	/**
	 * 
	 */
	void stopBehavior();
	/**
	 * 
	 * @param sig 
	 */
	void processStopProcess(
			::LegoCarFactoryRefactoringForSync::signals::StopProcess& /*in*/sig);
	/**
	 * 
	 * @param sig 
	 */
	void push(
			::LegoCarFactoryRefactoringForSync::signals::StopProcess& /*in*/sig);
	/**
	 * 
	 * @param sig 
	 */
	void processDeliveredCarConveyor(
			::CarFactoryLibrary::events::DeliveredCarConveyor& /*in*/sig);
	/**
	 * 
	 * @param sig 
	 */
	void push(::CarFactoryLibrary::events::DeliveredCarConveyor& /*in*/sig);
	/**
	 * 
	 * @param sig 
	 */
	void processPrepareConveyor(
			::LegoCarFactoryRefactoringForSync::signals::PrepareConveyor& /*in*/sig);
	/**
	 * 
	 * @param sig 
	 */
	void push(
			::LegoCarFactoryRefactoringForSync::signals::PrepareConveyor& /*in*/sig);
	/**
	 * 
	 * @param sig 
	 */
	void processRestartAfterEmergencyStop(
			::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop& /*in*/sig);
	/**
	 * 
	 * @param sig 
	 */
	void push(
			::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop& /*in*/sig);
	/**
	 * 
	 * @param sig 
	 */
	void processGoToPress(
			::LegoCarFactoryRefactoringForSync::signals::GoToPress& /*in*/sig);
	/**
	 * 
	 * @param sig 
	 */
	void push(
			::LegoCarFactoryRefactoringForSync::signals::GoToPress& /*in*/sig);
	/**
	 * 
	 */
	void processCompletionEvent();
	/**
	 * 
	 * @param id 
	 */
	void StateEntry(unsigned int /*in*/id);
	/**
	 * 
	 * @param id 
	 */
	void StateExit(unsigned int /*in*/id);
	/**
	 * 
	 * @param id 
	 */
	void StateDoActivity(unsigned int /*in*/id);
	/**
	 * 
	 * @param data 
	 * @return ret 
	 */
	static void* thread_func_wrapper(void* /*in*/data);
	/**
	 * 
	 * @param id 
	 */
	void doCallActivity(int /*in*/id);
	/**
	 * 
	 * @param id 
	 * @param func_type 
	 * @param value 
	 */
	void setFlag(int /*in*/id, char /*in*/func_type, bool /*in*/value);
	/**
	 * 
	 * @param comp 
	 */
	void setComponent(
			::LegoCarFactoryRefactoringForSync::LegoCarComponents::Modules::Roof::RoofConvoyer* /*in*/comp);
	/**
	 * 
	 * @return ret 
	 */
	virtual IPush<LegoCarFactoryRefactoringForSync::signals::StopProcess>* get_pInStopProcess();
	/**
	 * 
	 * @return ret 
	 */
	virtual IPush<
			LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop>* get_pRestart();
	/**
	 * 
	 * @return ret 
	 */
	virtual IPush<LegoCarFactoryRefactoringForSync::signals::PrepareConveyor>* get_pPrepare();
	/**
	 * 
	 * @return ret 
	 */
	virtual IPush<CarFactoryLibrary::events::DeliveredCarConveyor>* get_pDelivered();
	/**
	 * 
	 * @return ret 
	 */
	virtual ::EV3PapyrusLibrary::Interfaces::Actuators::ILargeMotor* get_pLargeMotor();
	/**
	 * 
	 * @return ret 
	 */
	virtual IPush<LegoCarFactoryRefactoringForSync::signals::GoToPress>* get_pGotoProcess();
	/**
	 * 
	 * @return ret 
	 */
	virtual ::EV3PapyrusLibrary::IColorSensor* get_sensor();
	/**
	 * 
	 * @return ret 
	 */
	virtual ::EV3PapyrusLibrary::Interfaces::Actuators::ILargeMotor* get_pMotor();
	/**
	 * 
	 * @param ref 
	 */
	virtual void connect_pCheckRack(
			IPush<CarFactoryLibrary::events::CheckRack>* /*in*/ref);
	/**
	 * 
	 * @param ref 
	 */
	virtual void connect_pErrDetect(
			IPush<CarFactoryLibrary::events::ErrorDetection>* /*in*/ref);
	/**
	 * 
	 * @param ref 
	 */
	virtual void connect_pEndOfMo_Control(
			IPush<CarFactoryLibrary::events::EndOfModule>* /*in*/ref);
	/**
	 * 
	 * @param ref 
	 */
	virtual void connect_pEndOfMo_Shelf(
			IPush<CarFactoryLibrary::events::EndOfModule>* /*in*/ref);
	/**
	 * 
	 * @param ref 
	 */
	virtual void connect_pEndOfMo_Robotic(
			IPush<CarFactoryLibrary::events::EndOfModule>* /*in*/ref);
	/**
	 * 
	 * @param ref 
	 */
	virtual void connect_pEndOfMo_Press(
			IPush<CarFactoryLibrary::events::EndOfModule>* /*in*/ref);
	/**
	 * 
	 * @param ref 
	 */
	virtual void connect_pPressAssemble(
			IPush<CarFactoryLibrary::events::PressAssemble>* /*in*/ref);
	/**
	 * 
	 * @param ref 
	 */
	void connect_pLCD(
			::EV3PapyrusLibrary::Interfaces::EV3Brick::ILcd* /*in*/ref);
	/**
	 * 
	 * @param ref 
	 */
	void connect_pModule(::CarFactoryLibrary::IModule* /*in*/ref);

private:
	/**
	 * 
	 */
	::LegoCarFactoryRefactoringForSync::LegoCarComponents::Modules::Roof::RoofConvoyer* component;
};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of namespace Roof
} // of namespace __Architecture__Delegatee
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
 End of RoofConvoyer__Delegatee class header
 ************************************************************/

#endif
