// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define CarFactoryLibrary_Rack_BODY

/************************************************************
 Rack class body
 ************************************************************/

// include associated header file
#include "CarFactoryLibrary/Rack.h"

// Derived includes directives
#include "EV3PapyrusLibrary/IColorSensor.h"

namespace CarFactoryLibrary {

// static attributes (if any)

/**
 * check if the rack is empty
 * @return ret true if the rack is empty and false otherwise
 */
bool Rack::is_empty() {
	color_sensor.set_mode("COL-COLOR");
	if (!color_sensor.value(0)) { //the color is known
		return true;
	}

	return false;
}

/**
 * constructor of the Rack
 * @param sensorPort the color sensor port name
 */
Rack::Rack(::EV3PapyrusLibrary::Types::LocalString /*in*/sensorPort) :
		color_sensor(sensorPort), rackController(this) {
	color_sensor.set_mode("COL-COLOR");
	while (color_sensor.mode() != "COL-COLOR") { //Solve problem with robot user in the initialization of the sensor
		color_sensor.set_mode("COL-COLOR");
	}
}

/**
 * empty constructor of the rack (must not be use)
 */
Rack::Rack() :
		rackController(this) {
}

/**
 * 
 */
void Rack::connectorConfiguration() {
	bindPorts(color_sensor.colorSensorPort, sensor);
}

} // of namespace CarFactoryLibrary

/************************************************************
 End of Rack class body
 ************************************************************/
