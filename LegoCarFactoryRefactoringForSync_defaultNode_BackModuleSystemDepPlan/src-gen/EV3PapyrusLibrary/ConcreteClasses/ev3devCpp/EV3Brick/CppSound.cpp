// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define EV3PapyrusLibrary_ConcreteClasses_ev3devCpp_EV3Brick_CppSound_BODY

/************************************************************
              CppSound class body
 ************************************************************/


// include associated header file
#include "EV3PapyrusLibrary/ConcreteClasses/ev3devCpp/EV3Brick/CppSound.h"

// Derived includes directives
#include "EV3PapyrusLibrary/Interfaces/EV3Brick/ISound.h"


namespace EV3PapyrusLibrary {
namespace ConcreteClasses {
namespace ev3devCpp {
namespace EV3Brick {

// static attributes (if any)

/**
 * generated comment
 * @return ret 
 */
 void CppSound::beep() {
	return referencedSound.beep();
}

/**
 * 
 * @return ret 
 * @param frequency 
 * @param ms 
 */
 void CppSound::tone(unsigned int /*in*/ frequency, unsigned int /*in*/ ms) {
	return referencedSound.tone(frequency , ms);
}

/**
 * generated comment
 * @return ret 
 * @param soundfile 
 * @param bSynchronous 
 */
 void CppSound::play(::EV3PapyrusLibrary::Types::LocalString /*in*/ soundfile, ::PrimitiveTypes::Boolean /*in*/ bSynchronous) {
	referencedSound.play(soundfile , bSynchronous);
}

/**
 * generated comment
 * @return ret 
 * @param text 
 * @param bSynchronous 
 */
 void CppSound::speak(::EV3PapyrusLibrary::Types::LocalString& /*in*/ text, ::PrimitiveTypes::Boolean /*in*/ bSynchronous) {
	referencedSound.speak(text , bSynchronous);
}

/**
 * generated comment
 * @return ret 
 */
 unsigned int CppSound::volume() {
	return referencedSound.volume();
}

/**
 * generated comment
 * @return ret 
 * @param v 
 */
 void CppSound::set_volume(unsigned int /*in*/ v) {
	referencedSound.set_volume(v);
}

/**
 * play a file
 * @return ret 
 * @param soundfile the file name of the sound file
 * @param volume the volume to play
 */
 void CppSound::play_file(::EV3PapyrusLibrary::Types::LocalString /*in*/ soundfile, unsigned int /*in*/ volume) {
	set_volume(volume);
	play(soundfile, true);
}

/**
 * 
 * @return ret 
 * @param frequency the frequency of the tone
 * @param ms the duration the tone play (in millisecond)
 * @param volume the volume to play
 */
 void CppSound::play_tone(unsigned int /*in*/ frequency, unsigned int /*in*/ ms, unsigned int /*in*/ volume) {
	set_volume(volume);
	tone(frequency, ms);
}

/**
 * generated comment
 * @return ret 
 * @param frequency 
 * @param ms 
 */
 void CppSound::toneDummyForCompilation(unsigned int /*in*/ frequency, unsigned int /*in*/ ms) {
}

/**
 * 
 */
CppSound::CppSound() {
}



} // of namespace EV3Brick
} // of namespace ev3devCpp
} // of namespace ConcreteClasses
} // of namespace EV3PapyrusLibrary

/************************************************************
              End of CppSound class body
 ************************************************************/
