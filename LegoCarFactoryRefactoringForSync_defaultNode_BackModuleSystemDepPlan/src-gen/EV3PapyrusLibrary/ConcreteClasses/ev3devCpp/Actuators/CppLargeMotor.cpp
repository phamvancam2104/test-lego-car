// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define EV3PapyrusLibrary_ConcreteClasses_ev3devCpp_Actuators_CppLargeMotor_BODY

/************************************************************
              CppLargeMotor class body
 ************************************************************/

// Include from Include stereotype (pre-body)
#include "unistd.h"
// End of Include stereotype (pre-body)

// include associated header file
#include "EV3PapyrusLibrary/ConcreteClasses/ev3devCpp/Actuators/CppLargeMotor.h"

// Derived includes directives
#include "EV3PapyrusLibrary/Interfaces/Actuators/ILargeMotor.h"


namespace EV3PapyrusLibrary {
namespace ConcreteClasses {
namespace ev3devCpp {
namespace Actuators {

// static attributes (if any)

/**
 * generated comment
 * @return ret 
 */
 void CppLargeMotor::run_to_rel_pos() {
	referencedLarge_motor.run_to_rel_pos();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_command(::EV3PapyrusLibrary::Types::LocalString /*in*/ v) {
	referencedLarge_motor.set_command(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::EV3PapyrusLibrary::Types::ModeSet CppLargeMotor::commands() {
	return referencedLarge_motor.commands();
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::count_per_rot() {
	return referencedLarge_motor.count_per_rot();
}

/**
 * generated comment
 * @return ret 
 */
 ::EV3PapyrusLibrary::Types::LocalString CppLargeMotor::driver_name() {
	return referencedLarge_motor.driver_name();
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::duty_cycle() {
	return referencedLarge_motor.duty_cycle();
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::duty_cycle_sp() {
	return referencedLarge_motor.duty_cycle_sp();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_duty_cycle_sp(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_duty_cycle_sp(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::EV3PapyrusLibrary::Types::LocalString CppLargeMotor::encoder_polarity() {
	return referencedLarge_motor.encoder_polarity();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_encoder_polarity(::EV3PapyrusLibrary::Types::LocalString /*in*/ v) {
	referencedLarge_motor.set_encoder_polarity(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::EV3PapyrusLibrary::Types::LocalString CppLargeMotor::polarity() {
	return referencedLarge_motor.polarity();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_polarity(::EV3PapyrusLibrary::Types::LocalString /*in*/ v) {
	referencedLarge_motor.set_polarity(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::EV3PapyrusLibrary::Types::LocalString CppLargeMotor::port_name() {
	return referencedLarge_motor.port_name();
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::position() {
	return referencedLarge_motor.position();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_position(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_position(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::position_p() {
	return referencedLarge_motor.position_p();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_position_p(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_position_p(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::position_i() {
	return referencedLarge_motor.position_i();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_position_i(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_position_i(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::position_d() {
	return referencedLarge_motor.position_d();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_position_d(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_position_d(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::position_sp() {
	return referencedLarge_motor.position_sp();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_position_sp(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_position_sp(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::speed() {
	return referencedLarge_motor.speed();
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::speed_sp() {
	return referencedLarge_motor.speed_sp();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_speed_sp(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_speed_sp(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::ramp_up_sp() {
	return referencedLarge_motor.ramp_up_sp();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_ramp_up_sp(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_ramp_up_sp(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::ramp_down_sp() {
	return referencedLarge_motor.ramp_down_sp();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_ramp_down_sp(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_ramp_down_sp(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::EV3PapyrusLibrary::Types::LocalString CppLargeMotor::speed_regulation_enabled() {
	return referencedLarge_motor.speed_regulation_enabled();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_speed_regulation_enabled(::EV3PapyrusLibrary::Types::LocalString /*in*/ v) {
	referencedLarge_motor.set_speed_regulation_enabled(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::speed_regulation_p() {
	return referencedLarge_motor.speed_regulation_p();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_speed_regulation_p(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_speed_regulation_p(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::speed_regulation_i() {
	return referencedLarge_motor.speed_regulation_i();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_speed_regulation_i(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_speed_regulation_i(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::speed_regulation_d() {
	return referencedLarge_motor.speed_regulation_d();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_speed_regulation_d(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_speed_regulation_d(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::EV3PapyrusLibrary::Types::ModeSet CppLargeMotor::state() {
	return referencedLarge_motor.state();
}

/**
 * generated comment
 * @return ret 
 */
 ::EV3PapyrusLibrary::Types::LocalString CppLargeMotor::stop_command() {
	return referencedLarge_motor.stop_command();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_stop_command(::EV3PapyrusLibrary::Types::LocalString /*in*/ v) {
	referencedLarge_motor.set_stop_command(v);
}

/**
 * generated comment
 * @return ret 
 */
 ::EV3PapyrusLibrary::Types::ModeSet CppLargeMotor::stop_commands() {
	return referencedLarge_motor.stop_commands();
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::time_sp() {
	return referencedLarge_motor.time_sp();
}

/**
 * generated comment
 * @param v 
 */
void CppLargeMotor::set_time_sp(::PrimitiveTypes::Integer /*in*/ v) {
	referencedLarge_motor.set_time_sp(v);
}

/**
 * generated comment
 * @return ret 
 */
 void CppLargeMotor::run_forever() {
	referencedLarge_motor.run_forever();
}

/**
 * generated comment
 * @return ret 
 */
 void CppLargeMotor::run_to_abs_pos() {
	referencedLarge_motor.run_to_abs_pos();
}

/**
 * generated comment
 * @return ret 
 */
 void CppLargeMotor::run_timed() {
	return referencedLarge_motor.run_timed();
}

/**
 * generated comment
 * @return ret 
 */
 void CppLargeMotor::run_direct() {
	referencedLarge_motor.run_direct();
}

/**
 * generated comment
 * @return ret 
 */
 void CppLargeMotor::stop() {
	referencedLarge_motor.stop();
}

/**
 * generated comment
 * @return ret 
 */
 void CppLargeMotor::reset() {
	referencedLarge_motor.reset();
}

/**
 * generated comment
 * @return ret 
 * @param dir 
 * @param pattern 
 * @param match 
 */
 ::PrimitiveTypes::Boolean CppLargeMotor::connect(::EV3PapyrusLibrary::Types::LocalString& /*in*/ dir, ::EV3PapyrusLibrary::Types::LocalString& /*in*/ pattern, ::EV3PapyrusLibrary::Types::MapStringSetString& /*in*/ match) {
	return ((device*)&referencedLarge_motor)->connect(dir , pattern , match);
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Boolean CppLargeMotor::connected() {
	return referencedLarge_motor.connected();
}

/**
 * generated comment
 * @return ret 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::device_index() {
	return referencedLarge_motor.device_index();
}

/**
 * generated comment
 * @return ret 
 * @param name 
 */
 ::PrimitiveTypes::Integer CppLargeMotor::get_attr_int(::EV3PapyrusLibrary::Types::LocalString& /*in*/ name) {
	return ((device*)&referencedLarge_motor)->get_attr_int(name);
}

/**
 * generated comment
 * @return ret 
 * @param name 
 * @param value 
 */
 void CppLargeMotor::set_attr_int(::EV3PapyrusLibrary::Types::LocalString& /*in*/ name, ::PrimitiveTypes::Integer /*in*/ value) {
	((device*)&referencedLarge_motor)->set_attr_int(name , value);
}

/**
 * generated comment
 * @return ret 
 * @param name 
 */
 ::EV3PapyrusLibrary::Types::LocalString CppLargeMotor::get_attr_string(::EV3PapyrusLibrary::Types::LocalString& /*in*/ name) {
	return ((device*)&referencedLarge_motor)->get_attr_string(name);
}

/**
 * generated comment
 * @return ret 
 * @param name 
 * @param value 
 */
 void CppLargeMotor::set_attr_string(::EV3PapyrusLibrary::Types::LocalString& /*in*/ name, ::EV3PapyrusLibrary::Types::LocalString& /*in*/ value) {
	((device*)&referencedLarge_motor)->set_attr_string(name , value);
}

/**
 * generated comment
 * @return ret 
 * @param name 
 */
 ::EV3PapyrusLibrary::Types::LocalString CppLargeMotor::get_attr_line(::EV3PapyrusLibrary::Types::LocalString& /*in*/ name) {
	return ((device*)&referencedLarge_motor)->get_attr_line(name);
}

/**
 * generated comment
 * @return ret 
 * @param name 
 * @param pCur 
 */
 ::EV3PapyrusLibrary::Types::ModeSet CppLargeMotor::get_attr_set(::EV3PapyrusLibrary::Types::LocalString& /*in*/ name, ::EV3PapyrusLibrary::Types::LocalString* /*in*/ pCur) {
	return ((device*)&referencedLarge_motor)->get_attr_set(name , pCur);
}

/**
 * generated comment
 * @return ret 
 * @param name 
 */
 ::EV3PapyrusLibrary::Types::LocalString CppLargeMotor::get_attr_from_set(::EV3PapyrusLibrary::Types::LocalString& /*in*/ name) {
	return ((device*)&referencedLarge_motor)->get_attr_from_set(name);
}

/**
 * run the motor for a duration of "second" second
 * @param power The power give to the motor (equivalent to the speed)
 * @param second the number of second the motor run
 * @param brake true if there is a brake at the end of the movement, false otherwise
 * @param invert_sens true is the rotation is inverted, false otherwise
 * @return  
 */
 void CppLargeMotor::run_for_second(int /*in*/ power, int /*in*/ second, bool /*in*/ brake, bool /*in*/ invert_sens) {
	set_duty_cycle_sp(power);
		if (brake) {
			set_stop_command("brake");
		} else {
			set_stop_command("coast");
		}
		if (invert_sens) {
			set_polarity("inversed");
		} else {
			set_polarity("normal");
		}
		run_forever();
		sleep (second);
		stop();
}

/**
 * run the motor for a number of degres
 * @param power The power give to the motor (equivalent to the speed)
 * @param degres the number of degres the motor run
 * @param brake true if there is a brake at the end of the movement, false otherwise
 * @param invert_sens true is the rotation is inverted, false otherwise
 * @return  
 */
 void CppLargeMotor::run_for_degres(int /*in*/ power, int /*in*/ degres, bool /*in*/ brake, bool /*in*/ invert_sens) {
	set_duty_cycle_sp(power);
		if (brake) {
			set_stop_command("brake");
		} else {
			set_stop_command("coast");
		}
		if (invert_sens) {
			set_polarity("inversed");
		} else {
			set_polarity("normal");
		}
		set_position_sp(degres);
		run_to_rel_pos();
}

/**
 * run the motor for a number of turn
 * @param power The power give to the motor (equivalent to the speed)
 * @param nb_turn the number of turn
 * @param brake true if there is a brake at the end of the movement, false otherwise
 * @param invert_sens true is the rotation is inverted, false otherwise
 * @return  
 */
 void CppLargeMotor::run_for_turn(int /*in*/ power, int /*in*/ nb_turn, bool /*in*/ brake, bool /*in*/ invert_sens) {
	set_duty_cycle_sp(power);
		if (brake) {
			set_stop_command("brake");
		} else {
			set_stop_command("coast");
		}
		if (invert_sens) {
			set_polarity("inversed");
		} else {
			set_polarity("normal");
		}
		run_for_degres(power, nb_turn * 360, brake, invert_sens);
}

/**
 * run the motor still there is a stop command
 * @param power The power give to the motor (equivalent to the speed)
 * @param invert_sens true is the rotation is inverted, false otherwise
 * @return  
 */
 void CppLargeMotor::start(int /*in*/ power, bool /*in*/ invert_sens) {
	set_duty_cycle_sp(power);
		if (invert_sens) {
			set_polarity("inversed");
		} else {
			set_polarity("normal");
		}
		run_forever();
}

/**
 * stop the motor
 * @param brake true if there is a brake at the end of the movement, false otherwise
 * @return  
 */
 void CppLargeMotor::stop(bool /*in*/ brake) {
	if (brake) {
			set_stop_command("brake");
		} else {
			set_stop_command("coast");
		}
		stop();
}

/**
 * 
 * @param portAdress 
 */
CppLargeMotor::CppLargeMotor(::EV3PapyrusLibrary::Types::LocalString /*in*/ portAdress): referencedLarge_motor(portAdress) {
}



} // of namespace Actuators
} // of namespace ev3devCpp
} // of namespace ConcreteClasses
} // of namespace EV3PapyrusLibrary

/************************************************************
              End of CppLargeMotor class body
 ************************************************************/
