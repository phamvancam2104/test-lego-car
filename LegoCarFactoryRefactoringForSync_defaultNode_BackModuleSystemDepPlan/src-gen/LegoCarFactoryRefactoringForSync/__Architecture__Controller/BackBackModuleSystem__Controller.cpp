// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define LegoCarFactoryRefactoringForSync___Architecture__Controller_BackBackModuleSystem__Controller_BODY

/************************************************************
 BackBackModuleSystem__Controller class body
 ************************************************************/

// include associated header file
#include "LegoCarFactoryRefactoringForSync/__Architecture__Controller/BackBackModuleSystem__Controller.h"

// Derived includes directives
#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Back/BackModuleSystem.h"

namespace LegoCarFactoryRefactoringForSync {
namespace __Architecture__Controller {

// static attributes (if any)

/**
 * 
 * @param origin 
 */
BackBackModuleSystem__Controller::BackBackModuleSystem__Controller(
		::LegoCarFactoryRefactoringForSync::LegoCarComponents::Modules::Back::BackModuleSystem* /*in*/origin) :
		p_origin(origin) {
}

/**
 * 
 */
void BackBackModuleSystem__Controller::createConnections() {
	// realization of connector <connector_pCheckRack_to_pCheckRack_CheckRack>
	p_origin->conveyor.backconvoyerController.connect_pCheckRack(
			p_origin->shelf.slaveshelfController.get_pCheckRack());

	// realization of connector <connector_pEndOfMo_Shelf_to_pEndOfMo_EndOfModule>
	p_origin->conveyor.backconvoyerController.connect_pEndOfMo_Shelf(
			p_origin->shelf.slaveshelfController.get_pEndOfMo());

	// realization of connector <connector_pEndOfMo_to_pEndOfMo_Robotic_EndOfModule>
	p_origin->conveyor.backconvoyerController.connect_pEndOfMo_Robotic(
			p_origin->robotic_arm.backroboticarmController.get_pEndOfMo());

	// realization of connector <connector_pDelivered_to_pDelivered_DeliveredCarConveyor>
	p_origin->robotic_arm.backroboticarmController.connect_pDelivered(
			p_origin->conveyor.backconvoyerController.get_pDelivered());

	// realization of connector <connector_pPickPiece_to_pPickPiece_RoboticArmPickPiece>
	p_origin->shelf.slaveshelfController.connect_pPickPiece(
			p_origin->robotic_arm.backroboticarmController.get_pPickPiece());

	// realization of connector <connector_pEndOfMo_Press_to_pEndOfMo_EndOfModule>
	p_origin->conveyor.backconvoyerController.connect_pEndOfMo_Press(
			p_origin->press.slavepressController.get_pEndOfMo());

	// realization of connector <connector_pPressAssemble_to_pOutPressAssemble_PressAssemble>
	p_origin->conveyor.backconvoyerController.connect_pOutPressAssemble(
			p_origin->press.slavepressController.get_pPressAssemble());

	// realization of connector <connector_pOutStopProcess_Shelf_to_pInStopProcess_StopProcess>
	p_origin->controller.backcontrolcomponentController.connect_pOutStopProcess_Shelf(
			p_origin->shelf.slaveshelfController.get_pInStopProcess());

	// realization of connector <connector_pOutStopProcess_RoboticArm_to_pInStopProcess_StopProcess>
	p_origin->controller.backcontrolcomponentController.connect_pOutStopProcess_RoboticArm(
			p_origin->robotic_arm.backroboticarmController.get_pInStopProcess());

	// realization of connector <connector_pStopProcess_Convoyer_to_pInStopProcess_StopProcess>
	p_origin->controller.backcontrolcomponentController.connect_pStopProcess_Convoyer(
			p_origin->conveyor.backconvoyerController.get_pInStopProcess());

	// realization of connector <connector_pInRestart_to_pOutRestart_Shelf_RestartAfterEmergencyStop>
	p_origin->controller.backcontrolcomponentController.connect_pOutRestart_Shelf(
			p_origin->shelf.slaveshelfController.get_pInRestart());

	// realization of connector <connector_pRestart_to_pOutRestart_Convoyer_RestartAfterEmergencyStop>
	p_origin->controller.backcontrolcomponentController.connect_pOutRestart_Convoyer(
			p_origin->conveyor.backconvoyerController.get_pRestart());

	// realization of connector <connector_pInRestart_to_pOutRestart_Robotic_RestartAfterEmergencyStop>
	p_origin->controller.backcontrolcomponentController.connect_pOutRestart_Robotic(
			p_origin->robotic_arm.backroboticarmController.get_pInRestart());

	// realization of connector <connector_pPrepare_to_pPrepare_PrepareConveyor>
	p_origin->controller.backcontrolcomponentController.connect_pPrepare(
			p_origin->conveyor.backconvoyerController.get_pPrepare());

	// realization of connector <connector_pErrDetect_to_pErrDetect_ErrorDetection>
	p_origin->shelf.slaveshelfController.connect_pErrDetect(
			p_origin->controller.backcontrolcomponentController.get_pErrDetect());

	// realization of connector <connector_pEndOfMo_to_pEndOfMo_Control_EndOfModule>
	p_origin->conveyor.backconvoyerController.connect_pEndOfMo_Control(
			p_origin->controller.backcontrolcomponentController.get_pEndOfMo());

	// realization of connector <connector_pModule_to_pModule_IModule>
	p_origin->press.slavepressController.connect_pModule(
			p_origin->controller.backcontrolcomponentController.get_pModule());

	// realization of connector <connector_pLCD_to_pLCD_ILcd>
	p_origin->press.slavepressController.connect_pLCD(
			p_origin->controller.backcontrolcomponentController.get_pLCD());

	// realization of connector <connector_pILargeMotor_to_pLargeMotorPress_ILargeMotor>
	p_origin->controller.backcontrolcomponentController.connect_pLargeMotorPress(
			p_origin->press.slavepressController.get_pILargeMotor());

	// realization of connector <connector_pFloatMotor_to_pFloatMotor_IRoboticArmFloatMotor>
	p_origin->controller.backcontrolcomponentController.connect_pFloatMotor(
			p_origin->robotic_arm.backroboticarmController.get_pFloatMotor());

	// realization of connector <connector_pLargeMotorConvoyer_to_pILargeMotor_ILargeMotor>
	p_origin->controller.backcontrolcomponentController.connect_pLargeMotorConvoyer(
			p_origin->conveyor.backconvoyerController.get_pILargeMotor());

	// realization of connector <connector_pOutStopProcess_Press_to_pInStopProcess_StopProcess>
	p_origin->controller.backcontrolcomponentController.connect_pOutStopProcess_Press(
			p_origin->press.slavepressController.get_pInStopProcess());

	// realization of connector <connector_pOutRestart_Press_to_pInRestart_RestartAfterEmergencyStop>
	p_origin->controller.backcontrolcomponentController.connect_pOutRestart_Press(
			p_origin->press.slavepressController.get_pInRestart());

	// realization of connector <connector_pOutDelivered_to_pDelivered_DeliveredCarConveyor>
	p_origin->controller.backcontrolcomponentController.connect_pOutDelivered(
			p_origin->conveyor.backconvoyerController.get_pDelivered());

	// realization of connector <connector_pOutCheckRack_to_pCheckRack_CheckRack>
	p_origin->controller.backcontrolcomponentController.connect_pOutCheckRack(
			p_origin->shelf.slaveshelfController.get_pCheckRack());

	// realization of connector <connector_pGotoProcess_to_pOutGotoProcess_GoToPress>
	p_origin->robotic_arm.backroboticarmController.connect_pOutGotoProcess(
			p_origin->conveyor.backconvoyerController.get_pGotoProcess());

}

} // of namespace __Architecture__Controller
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
 End of BackBackModuleSystem__Controller class body
 ************************************************************/
