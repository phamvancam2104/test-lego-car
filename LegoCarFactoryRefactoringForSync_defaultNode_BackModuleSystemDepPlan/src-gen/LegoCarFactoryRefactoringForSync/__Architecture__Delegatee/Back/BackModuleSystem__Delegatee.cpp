// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define LegoCarFactoryRefactoringForSync___Architecture__Delegatee_Back_BackModuleSystem__Delegatee_BODY

/************************************************************
 BackModuleSystem__Delegatee class body
 ************************************************************/

// include associated header file
#include "LegoCarFactoryRefactoringForSync/__Architecture__Delegatee/Back/BackModuleSystem__Delegatee.h"

// Derived includes directives
#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Back/BackModuleSystem.h"

namespace LegoCarFactoryRefactoringForSync {
namespace __Architecture__Delegatee {
namespace Back {

// static attributes (if any)

/**
 * 
 * @param comp 
 */
void BackModuleSystem__Delegatee::setComponent(
		::LegoCarFactoryRefactoringForSync::LegoCarComponents::Modules::Back::BackModuleSystem* /*in*/comp) {
	this->component = comp;
}

/**
 * 
 */
BackModuleSystem__Delegatee::BackModuleSystem__Delegatee() {
}

/**
 * 
 */
void BackModuleSystem__Delegatee::createConnections() {
	// realization of connector <connector_pCheckRack_to_pCheckRack_CheckRack>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->conveyor.BackConvoyerDelegatee.connect_pCheckRack(
					component->shelf.SlaveShelfDelegatee.get_pCheckRack());
		}
	}
	// realization of connector <connector_pEndOfMo_Shelf_to_pEndOfMo_EndOfModule>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->conveyor.BackConvoyerDelegatee.connect_pEndOfMo_Shelf(
					component->shelf.SlaveShelfDelegatee.get_pEndOfMo());
		}
	}
	// realization of connector <connector_pEndOfMo_to_pEndOfMo_Robotic_EndOfModule>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->conveyor.BackConvoyerDelegatee.connect_pEndOfMo_Robotic(
					component->robotic_arm.BackRoboticArmDelegatee.get_pEndOfMo());
		}
	}
	// realization of connector <connector_pDelivered_to_pDelivered_DeliveredCarConveyor>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->robotic_arm.BackRoboticArmDelegatee.connect_pDelivered(
					component->conveyor.BackConvoyerDelegatee.get_pDelivered());
		}
	}
	// realization of connector <connector_pPickPiece_to_pPickPiece_RoboticArmPickPiece>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->shelf.SlaveShelfDelegatee.connect_pPickPiece(
					component->robotic_arm.BackRoboticArmDelegatee.get_pPickPiece());
		}
	}
	// realization of connector <connector_pEndOfMo_Press_to_pEndOfMo_EndOfModule>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->conveyor.BackConvoyerDelegatee.connect_pEndOfMo_Press(
					component->press.SlavePressDelegatee.get_pEndOfMo());
		}
	}
	// realization of connector <connector_pPressAssemble_to_pOutPressAssemble_PressAssemble>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->conveyor.BackConvoyerDelegatee.connect_pOutPressAssemble(
					component->press.SlavePressDelegatee.get_pPressAssemble());
		}
	}
	// realization of connector <connector_pOutStopProcess_Shelf_to_pInStopProcess_StopProcess>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pOutStopProcess_Shelf(
					component->shelf.SlaveShelfDelegatee.get_pInStopProcess());
		}
	}
	// realization of connector <connector_pOutStopProcess_RoboticArm_to_pInStopProcess_StopProcess>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pOutStopProcess_RoboticArm(
					component->robotic_arm.BackRoboticArmDelegatee.get_pInStopProcess());
		}
	}
	// realization of connector <connector_pStopProcess_Convoyer_to_pInStopProcess_StopProcess>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pStopProcess_Convoyer(
					component->conveyor.BackConvoyerDelegatee.get_pInStopProcess());
		}
	}
	// realization of connector <connector_pInRestart_to_pOutRestart_Shelf_RestartAfterEmergencyStop>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pOutRestart_Shelf(
					component->shelf.SlaveShelfDelegatee.get_pInRestart());
		}
	}
	// realization of connector <connector_pRestart_to_pOutRestart_Convoyer_RestartAfterEmergencyStop>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pOutRestart_Convoyer(
					component->conveyor.BackConvoyerDelegatee.get_pRestart());
		}
	}
	// realization of connector <connector_pInRestart_to_pOutRestart_Robotic_RestartAfterEmergencyStop>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pOutRestart_Robotic(
					component->robotic_arm.BackRoboticArmDelegatee.get_pInRestart());
		}
	}
	// realization of connector <connector_pPrepare_to_pPrepare_PrepareConveyor>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pPrepare(
					component->conveyor.BackConvoyerDelegatee.get_pPrepare());
		}
	}
	// realization of connector <connector_pErrDetect_to_pErrDetect_ErrorDetection>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->shelf.SlaveShelfDelegatee.connect_pErrDetect(
					component->controller.BackControlComponentDelegatee.get_pErrDetect());
		}
	}
	// realization of connector <connector_pEndOfMo_to_pEndOfMo_Control_EndOfModule>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->conveyor.BackConvoyerDelegatee.connect_pEndOfMo_Control(
					component->controller.BackControlComponentDelegatee.get_pEndOfMo());
		}
	}
	// realization of connector <connector_pModule_to_pModule_IModule>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->press.SlavePressDelegatee.connect_pModule(
					component->controller.BackControlComponentDelegatee.get_pModule());
		}
	}
	// realization of connector <connector_pLCD_to_pLCD_ILcd>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->press.SlavePressDelegatee.connect_pLCD(
					component->controller.BackControlComponentDelegatee.get_pLCD());
		}
	}
	// realization of connector <connector_pILargeMotor_to_pLargeMotorPress_ILargeMotor>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pLargeMotorPress(
					component->press.SlavePressDelegatee.get_pILargeMotor());
		}
	}
	// realization of connector <connector_pFloatMotor_to_pFloatMotor_IRoboticArmFloatMotor>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pFloatMotor(
					component->robotic_arm.BackRoboticArmDelegatee.get_pFloatMotor());
		}
	}
	// realization of connector <connector_pLargeMotorConvoyer_to_pILargeMotor_ILargeMotor>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pLargeMotorConvoyer(
					component->conveyor.BackConvoyerDelegatee.get_pILargeMotor());
		}
	}
	// realization of connector <connector_pOutStopProcess_Press_to_pInStopProcess_StopProcess>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pOutStopProcess_Press(
					component->press.SlavePressDelegatee.get_pInStopProcess());
		}
	}
	// realization of connector <connector_pOutRestart_Press_to_pInRestart_RestartAfterEmergencyStop>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pOutRestart_Press(
					component->press.SlavePressDelegatee.get_pInRestart());
		}
	}
	// realization of connector <connector_pOutDelivered_to_pDelivered_DeliveredCarConveyor>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pOutDelivered(
					component->conveyor.BackConvoyerDelegatee.get_pDelivered());
		}
	}
	// realization of connector <connector_pOutCheckRack_to_pCheckRack_CheckRack>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->controller.BackControlComponentDelegatee.connect_pOutCheckRack(
					component->shelf.SlaveShelfDelegatee.get_pCheckRack());
		}
	}
	// realization of connector <connector_pGotoProcess_to_pOutGotoProcess_GoToPress>
	for (int i = 0; i < 1; i++) {
		for (int j = 0; j < 1; j++) {
			component->robotic_arm.BackRoboticArmDelegatee.connect_pOutGotoProcess(
					component->conveyor.BackConvoyerDelegatee.get_pGotoProcess());
		}
	}
}

} // of namespace Back
} // of namespace __Architecture__Delegatee
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
 End of BackModuleSystem__Delegatee class body
 ************************************************************/
