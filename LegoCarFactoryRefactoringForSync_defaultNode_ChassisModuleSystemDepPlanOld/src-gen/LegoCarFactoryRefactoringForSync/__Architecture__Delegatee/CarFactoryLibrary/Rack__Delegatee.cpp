// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define LegoCarFactoryRefactoringForSync___Architecture__Delegatee_CarFactoryLibrary_Rack__Delegatee_BODY

/************************************************************
              Rack__Delegatee class body
 ************************************************************/


// include associated header file
#include "LegoCarFactoryRefactoringForSync/__Architecture__Delegatee/CarFactoryLibrary/Rack__Delegatee.h"

// Derived includes directives
#include "CarFactoryLibrary/Rack.h"
#include "EV3PapyrusLibrary/IColorSensor.h"


namespace LegoCarFactoryRefactoringForSync {
namespace __Architecture__Delegatee {
namespace CarFactoryLibrary {

// static attributes (if any)

/**
 * 
 * @param comp 
 */
void Rack__Delegatee::setComponent(::CarFactoryLibrary::Rack* /*in*/ comp) {
	this->component = comp;
	this->get_sensor();
}

/**
 * 
 */
Rack__Delegatee::Rack__Delegatee() {
}

/**
 * 
 * @return ret 
 */
 ::EV3PapyrusLibrary::IColorSensor* Rack__Delegatee::get_sensor() {
	//array pattern: mul(A)*mul(pA) = mul(B) * mul(pB)
	//mul(A) = 1 (delegation), if mul(pA) = 1 => mul(B) = 1 and mul(pB) = 1
	component->sensor.providedIntf = component->color_sensor.CppColorSensorDelegatee.get_colorSensorPort();
	return component->sensor.providedIntf;
}



} // of namespace CarFactoryLibrary
} // of namespace __Architecture__Delegatee
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
              End of Rack__Delegatee class body
 ************************************************************/
