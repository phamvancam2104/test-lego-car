// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define LegoCarFactoryRefactoringForSync___Architecture__Delegatee_Chassis_ChassisShelf__Delegatee_BODY

/************************************************************
              ChassisShelf__Delegatee class body
 ************************************************************/


// include associated header file
#include "LegoCarFactoryRefactoringForSync/__Architecture__Delegatee/Chassis/ChassisShelf__Delegatee.h"

// Derived includes directives
#include "CarFactoryLibrary/IModule.h"
#include "CarFactoryLibrary/events/CheckRack.h"
#include "CarFactoryLibrary/events/EndOfModule.h"
#include "CarFactoryLibrary/events/ErrorDetection.h"
#include "CarFactoryLibrary/events/RoboticArmPickPiece.h"
#include "EV3PapyrusLibrary/IColorSensor.h"
#include "EV3PapyrusLibrary/Interfaces/EV3Brick/ILcd.h"
#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Chassis/ChassisShelf.h"
#include "LegoCarFactoryRefactoringForSync/signals/RestartAfterEmergencyStop.h"
#include "LegoCarFactoryRefactoringForSync/signals/StopProcess.h"
#include "statemachine/Pkg_statemachine.h"


namespace LegoCarFactoryRefactoringForSync {
namespace __Architecture__Delegatee {
namespace Chassis {

// static attributes (if any)

/**
 * 
 */
void ChassisShelf__Delegatee::dispatchEvent() {
	bool popDeferred = false;
	dispatchFlag = true;
	
	//initialze root active state
	//execute initial effect
	ChassisShelfStateMachine_Region1_Enter(CHASSISSHELF_CHASSISSHELFSTATEMACHINE_REGION1_DEFAULT);
	
	while(systemState != statemachine::STOPPED) {
		//run-to-completion: need to have a mutex here
		currentEvent = eventQueue.pop(popDeferred);
		if (currentEvent != NULL) {
			CHASSISSHELF__DELEGATEE_GET_CONTROL
			switch(currentEvent->eventID) {
				case CHECKRACK_ID:
					::CarFactoryLibrary::events::CheckRack sig_CHECKRACK_ID;
					memcpy(&sig_CHECKRACK_ID, currentEvent->data, sizeof(::CarFactoryLibrary::events::CheckRack));
					processCheckRack(sig_CHECKRACK_ID);
					break;
				case ENDOFMODULE_ID:
					::CarFactoryLibrary::events::EndOfModule sig_ENDOFMODULE_ID;
					memcpy(&sig_ENDOFMODULE_ID, currentEvent->data, sizeof(::CarFactoryLibrary::events::EndOfModule));
					processEndOfModule(sig_ENDOFMODULE_ID);
					break;
				case STOPPROCESS_ID:
					::LegoCarFactoryRefactoringForSync::signals::StopProcess sig_STOPPROCESS_ID;
					memcpy(&sig_STOPPROCESS_ID, currentEvent->data, sizeof(::LegoCarFactoryRefactoringForSync::signals::StopProcess));
					processStopProcess(sig_STOPPROCESS_ID);
					break;
				case RESTARTAFTEREMERGENCYSTOP_ID:
					::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop sig_RESTARTAFTEREMERGENCYSTOP_ID;
					memcpy(&sig_RESTARTAFTEREMERGENCYSTOP_ID, currentEvent->data, sizeof(::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop));
					processRestartAfterEmergencyStop(sig_RESTARTAFTEREMERGENCYSTOP_ID);
					break;
					case COMPLETIONEVENT_ID: 
						processCompletionEvent();
					break;
			}
			if (systemState == statemachine::EVENT_DEFERRED) {
				eventQueue.saveDeferred(*currentEvent);
			}
			popDeferred = (systemState != statemachine::EVENT_DEFERRED);
			systemState = statemachine::IDLE;
			CHASSISSHELF__DELEGATEE_RELEASE_CONTROL
		}
	}
}

/**
 * 
 * @param enter_mode 
 */
void ChassisShelf__Delegatee::ChassisShelfStateMachine_Region1_Enter(char /*in*/ enter_mode) {
	switch(enter_mode) {
		case CHASSISSHELF_CHASSISSHELFSTATEMACHINE_REGION1_DEFAULT:
			activeStateID = PRINCIPALSTATE_ID;
			
			
			PrincipalState_Region1_Enter(CHASSISSHELF_PRINCIPALSTATE_REGION1_DEFAULT);
			//TODO: set systemState to EVENT_CONSUMED
			break;
	}
}

/**
 * 
 * @param enter_mode 
 */
void ChassisShelf__Delegatee::PrincipalState_Region1_Enter(char /*in*/ enter_mode) {
	switch(enter_mode) {
		case CHASSISSHELF_PRINCIPALSTATE_REGION1_DEFAULT:
			states[PRINCIPALSTATE_ID].actives[0] = INITIALIZATION_ID;
			
			
			//TODO: set systemState to EVENT_CONSUMED
			break;
		case CHASSISSHELF_PRINCIPALSTATE_REGION1_INITIALIZATION:
			states[PRINCIPALSTATE_ID].actives[0] = INITIALIZATION_ID;
			//starting the counters for time events
			//TODO: set systemState to EVENT_CONSUMED
			break;
	}
}

/**
 * 
 */
void ChassisShelf__Delegatee::PrincipalState_Region1_Exit() {
	//exiting region Region1
	if (states[PRINCIPALSTATE_ID].actives[0] != STATE_MAX) {
		//signal to exit the doActivity of sub-state of PrincipalState
		setFlag(states[PRINCIPALSTATE_ID].actives[0], statemachine::TF_DO_ACTIVITY, false);
		if (NOT_MASTER_MODULE_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else 
		if (WAITSLAVEISNOTBUSY_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else 
		if (DISPLAY_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else 
		if (WAIT_END_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else 
		if (INITIALIZATION_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else 
		if (EMPTY_RACK_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else 
		if (FIRST_RACK_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else 
		if (SECOND_RACK_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		}
		//exit action of sub-state of PrincipalState
		StateExit(states[PRINCIPALSTATE_ID].actives[0]);
		//set active sub-state of PrincipalState to STATE_MAX meaning NULL
		states[PRINCIPALSTATE_ID].actives[0] = STATE_MAX;
	}
}

/**
 * 
 */
ChassisShelf__Delegatee::ChassisShelf__Delegatee(): systemState(statemachine::IDLE) {
	//startBehavior();
}

/**
 * 
 */
void ChassisShelf__Delegatee::startBehavior() {
	// initialize all threads, the threads wait until the associated flag is set
	for(int i = 0; i < (int) STATE_MAX; i++) {
		if (states[i].hasDoActivity) {
			threadStructs[i].id = i;
			threadStructs[i].ptr = this;
			threadStructs[i].func_type = statemachine::TF_DO_ACTIVITY;
			mutexes[i] = PTHREAD_MUTEX_INITIALIZER;
			conds[i] = PTHREAD_COND_INITIALIZER;
			pthread_create(&threads[i], NULL, &ChassisShelf__Delegatee::thread_func_wrapper, &threadStructs[i]);
		}
	}
		
			
			
	
	runToCompletionMutex = PTHREAD_MUTEX_INITIALIZER;
	runToCompletionCond = PTHREAD_COND_INITIALIZER;
	
	dispatchStruct = statemachine::StructForThread_t(this, 0, 0, statemachine::TF_STATE_MACHINE_TYPE, 0);
	ChassisShelf__Delegatee_THREAD_CREATE(dispatchThread, dispatchStruct)
}

/**
 * 
 */
ChassisShelf__Delegatee::~ChassisShelf__Delegatee() {
	stopBehavior();
}

/**
 * 
 */
void ChassisShelf__Delegatee::stopBehavior() {
	systemState = statemachine::STOPPED;
		//signal and wait for doActivity termination
		for(int i = 0; i < (int) STATE_MAX; i++) {
			if (states[i].hasDoActivity) {
				pthread_cond_signal(&conds[i]);
				pthread_join(threads[i], NULL);
			}
		}
		
		//signal and wait for time event thread termination
	
		//main thread
		pthread_join(dispatchThread, NULL);
}

/**
 * 
 * @param sig 
 */
void ChassisShelf__Delegatee::processCheckRack(::CarFactoryLibrary::events::CheckRack& /*in*/ sig) {
	systemState = statemachine::EVENT_PROCESSING;
	if (states[PRINCIPALSTATE_ID].actives[0] == INITIALIZATION_ID) {
		//from Initialization to Display
		if (true) {
		states[PRINCIPALSTATE_ID].actives[0] = DISPLAY_ID;
		//starting the counters for time events
		//start activity of Display by calling setFlag
		setFlag(DISPLAY_ID, statemachine::TF_DO_ACTIVITY, true);
		systemState = statemachine::EVENT_CONSUMED;
		}
	}
}

/**
 * 
 * @param sig 
 */
void ChassisShelf__Delegatee::push(::CarFactoryLibrary::events::CheckRack& /*in*/ sig) {
	eventQueue.push(statemachine::PRIORITY_2, &sig, CHECKRACK_ID, statemachine::SIGNAL_EVENT, 0, sizeof(::CarFactoryLibrary::events::CheckRack));
}

/**
 * 
 * @param sig 
 */
void ChassisShelf__Delegatee::processEndOfModule(::CarFactoryLibrary::events::EndOfModule& /*in*/ sig) {
	systemState = statemachine::EVENT_PROCESSING;
	if (states[PRINCIPALSTATE_ID].actives[0] == WAIT_END_ID) {
		//from Wait_end to Initialization
		if (true) {
		states[PRINCIPALSTATE_ID].actives[0] = INITIALIZATION_ID;
		//starting the counters for time events
		systemState = statemachine::EVENT_CONSUMED;
		}
	}
}

/**
 * 
 * @param sig 
 */
void ChassisShelf__Delegatee::push(::CarFactoryLibrary::events::EndOfModule& /*in*/ sig) {
	eventQueue.push(statemachine::PRIORITY_2, &sig, ENDOFMODULE_ID, statemachine::SIGNAL_EVENT, 0, sizeof(::CarFactoryLibrary::events::EndOfModule));
}

/**
 * 
 * @param sig 
 */
void ChassisShelf__Delegatee::processStopProcess(::LegoCarFactoryRefactoringForSync::signals::StopProcess& /*in*/ sig) {
	systemState = statemachine::EVENT_PROCESSING;
	if (systemState == statemachine::EVENT_PROCESSING) {
		switch(activeStateID) {
			case PRINCIPALSTATE_ID: 
				//from PrincipalState to Restart
				if (true) {
				PrincipalState_Region1_Exit();
				activeStateID = RESTART_ID;
				//starting the counters for time events
				systemState = statemachine::EVENT_CONSUMED;
				}
				break;
			default:
				//do nothing
				break;
		}
	}
}

/**
 * 
 * @param sig 
 */
void ChassisShelf__Delegatee::push(::LegoCarFactoryRefactoringForSync::signals::StopProcess& /*in*/ sig) {
	eventQueue.push(statemachine::PRIORITY_2, &sig, STOPPROCESS_ID, statemachine::SIGNAL_EVENT, 0, sizeof(::LegoCarFactoryRefactoringForSync::signals::StopProcess));
}

/**
 * 
 * @param sig 
 */
void ChassisShelf__Delegatee::processRestartAfterEmergencyStop(::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop& /*in*/ sig) {
	systemState = statemachine::EVENT_PROCESSING;
	if (systemState == statemachine::EVENT_PROCESSING) {
		switch(activeStateID) {
			case RESTART_ID: 
				//from Restart to PrincipalState
				if (true) {
				activeStateID = PRINCIPALSTATE_ID;
				//starting the counters for time events
				PrincipalState_Region1_Enter(CHASSISSHELF_PRINCIPALSTATE_REGION1_DEFAULT);
				systemState = statemachine::EVENT_CONSUMED;
				}
				break;
			default:
				//do nothing
				break;
		}
	}
}

/**
 * 
 * @param sig 
 */
void ChassisShelf__Delegatee::push(::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop& /*in*/ sig) {
	eventQueue.push(statemachine::PRIORITY_2, &sig, RESTARTAFTEREMERGENCYSTOP_ID, statemachine::SIGNAL_EVENT, 0, sizeof(::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop));
}

/**
 * 
 */
void ChassisShelf__Delegatee::processCompletionEvent() {
	systemState = statemachine::EVENT_PROCESSING;
	if (states[PRINCIPALSTATE_ID].actives[0] == NOT_MASTER_MODULE_ID && (currentEvent->associatedState == NOT_MASTER_MODULE_ID)) {
		//from Not_Master_Module to WaitSlaveIsNotBusy
		if (true) {
		states[PRINCIPALSTATE_ID].actives[0] = WAITSLAVEISNOTBUSY_ID;
		//starting the counters for time events
		//start activity of WaitSlaveIsNotBusy by calling setFlag
		setFlag(WAITSLAVEISNOTBUSY_ID, statemachine::TF_DO_ACTIVITY, true);
		systemState = statemachine::EVENT_CONSUMED;
		}
	} else 
	if (states[PRINCIPALSTATE_ID].actives[0] == DISPLAY_ID && (currentEvent->associatedState == DISPLAY_ID)) {
		//from Display to test
		if (true) {
			if (test_CompletionEvent == 0) {
				states[PRINCIPALSTATE_ID].actives[0] = NOT_MASTER_MODULE_ID;
				//starting the counters for time events
				//start activity of Not_Master_Module by calling setFlag
				setFlag(NOT_MASTER_MODULE_ID, statemachine::TF_DO_ACTIVITY, true);
			} else { 
				if (Which_rack_CompletionEvent == 0) {
					states[PRINCIPALSTATE_ID].actives[0] = FIRST_RACK_ID;
					//starting the counters for time events
					//start activity of First_rack by calling setFlag
					setFlag(FIRST_RACK_ID, statemachine::TF_DO_ACTIVITY, true);
				} else if (Which_rack_CompletionEvent == 2) {
					states[PRINCIPALSTATE_ID].actives[0] = SECOND_RACK_ID;
					//starting the counters for time events
					//start activity of Second_rack by calling setFlag
					setFlag(SECOND_RACK_ID, statemachine::TF_DO_ACTIVITY, true);
				} else { 
					states[PRINCIPALSTATE_ID].actives[0] = EMPTY_RACK_ID;
					//starting the counters for time events
					//start activity of Empty_rack by calling setFlag
					setFlag(EMPTY_RACK_ID, statemachine::TF_DO_ACTIVITY, true);
				}
			}
		systemState = statemachine::EVENT_CONSUMED;
		}
	} else 
	if (states[PRINCIPALSTATE_ID].actives[0] == WAITSLAVEISNOTBUSY_ID && (currentEvent->associatedState == WAITSLAVEISNOTBUSY_ID)) {
		//from WaitSlaveIsNotBusy to choice
		if (true) {
			if (choice_CompletionEvent == 0) {
				states[PRINCIPALSTATE_ID].actives[0] = WAIT_END_ID;
				//starting the counters for time events
			} else if (choice_CompletionEvent == 1) {
				states[PRINCIPALSTATE_ID].actives[0] = EMPTY_RACK_ID;
				//starting the counters for time events
				//start activity of Empty_rack by calling setFlag
				setFlag(EMPTY_RACK_ID, statemachine::TF_DO_ACTIVITY, true);
			} else { 
				PrincipalState_Region1_Exit();
				activeStateID = RESTART_ID;
				//starting the counters for time events
			}
		systemState = statemachine::EVENT_CONSUMED;
		}
	} else 
	if (states[PRINCIPALSTATE_ID].actives[0] == EMPTY_RACK_ID && (currentEvent->associatedState == EMPTY_RACK_ID)) {
		//from Empty_rack to Wait_end
		if (true) {
		states[PRINCIPALSTATE_ID].actives[0] = WAIT_END_ID;
		//starting the counters for time events
		systemState = statemachine::EVENT_CONSUMED;
		}
	} else 
	if (states[PRINCIPALSTATE_ID].actives[0] == FIRST_RACK_ID && (currentEvent->associatedState == FIRST_RACK_ID)) {
		//from First_rack to Wait_end
		if (true) {
		states[PRINCIPALSTATE_ID].actives[0] = WAIT_END_ID;
		//starting the counters for time events
		systemState = statemachine::EVENT_CONSUMED;
		}
	} else 
	if (states[PRINCIPALSTATE_ID].actives[0] == SECOND_RACK_ID && (currentEvent->associatedState == SECOND_RACK_ID)) {
		//from Second_rack to Wait_end
		if (true) {
		states[PRINCIPALSTATE_ID].actives[0] = WAIT_END_ID;
		//starting the counters for time events
		systemState = statemachine::EVENT_CONSUMED;
		}
	}
}

/**
 * 
 * @param id 
 */
void ChassisShelf__Delegatee::StateEntry(unsigned int /*in*/ id) {
	switch(id) {
		default:
			//do nothing
			break;
	}
}

/**
 * 
 * @param id 
 */
void ChassisShelf__Delegatee::StateExit(unsigned int /*in*/ id) {
	switch(id) {
		default:
			//do nothing
			break;
	}
}

/**
 * 
 * @param id 
 */
void ChassisShelf__Delegatee::StateDoActivity(unsigned int /*in*/ id) {
	switch(id) {
		default:
			//do nothing
			break;
	}
}

/**
 * 
 * @param data 
 * @return ret 
 */
 void* ChassisShelf__Delegatee::thread_func_wrapper(void* /*in*/ data) {
	statemachine::StructForThread_t* cptr = (statemachine::StructForThread_t*)data;
	ChassisShelf__Delegatee* ptr = (ChassisShelf__Delegatee*) cptr->ptr;
	switch(cptr->func_type) {
			case statemachine::TF_STATE_MACHINE_TYPE:
				ptr->dispatchEvent();
				break;
	}
	return NULL;
}

/**
 * 
 * @param id 
 */
void ChassisShelf__Delegatee::doCallActivity(int /*in*/ id) {
	flags[id] = false;
	while(systemState != statemachine::STOPPED) {
		pthread_mutex_lock(&mutexes[id]);
		while(!flags[id] && systemState != statemachine::STOPPED) {
			pthread_cond_wait(&conds[id], &mutexes[id]);
		}
		if (systemState != statemachine::STOPPED) {
			StateDoActivity(id);
		}
		bool commitEvent = false;
		if (flags[id]) {
			commitEvent = true;
			flags[id] = false;
		}
		pthread_cond_signal(&conds[id]);
		pthread_mutex_unlock(&mutexes[id]);
		if (commitEvent && systemState != statemachine::STOPPED) {
			if(id == NOT_MASTER_MODULE_ID || id == WAITSLAVEISNOTBUSY_ID || id == DISPLAY_ID || id == EMPTY_RACK_ID || id == FIRST_RACK_ID || id == SECOND_RACK_ID) {
				//processCompletionEvent();
				eventQueue.push(statemachine::PRIORITY_1, NULL, COMPLETIONEVENT_ID, statemachine::COMPLETION_EVENT, id);
			}
		}
	}
}

/**
 * 
 * @param id 
 * @param func_type 
 * @param value 
 */
void ChassisShelf__Delegatee::setFlag(int /*in*/ id, char /*in*/ func_type, bool /*in*/ value) {
	//value = true => start activity
	//value = false => stop activity
	if (func_type == statemachine::TF_DO_ACTIVITY) {
		//push completion event
			if (value) {
				if(id == NOT_MASTER_MODULE_ID || id == WAITSLAVEISNOTBUSY_ID || id == DISPLAY_ID || id == EMPTY_RACK_ID || id == FIRST_RACK_ID || id == SECOND_RACK_ID) {
					eventQueue.push(statemachine::PRIORITY_1, NULL, COMPLETIONEVENT_ID, statemachine::COMPLETION_EVENT, id);
				}
				return;
			} 
	}
}

/**
 * 
 * @param comp 
 */
void ChassisShelf__Delegatee::setComponent(::LegoCarFactoryRefactoringForSync::LegoCarComponents::Modules::Chassis::ChassisShelf* /*in*/ comp) {
	this->component = comp;
	this->get_sensor1();
	this->get_sensor2();
	this->get_sensor3();
	this->get_pInStopProcess();
	this->get_pInRestart();
	this->get_pCheckRack();
	this->get_pEndOfMo();
}

/**
 * 
 * @return ret 
 */
 IPush<LegoCarFactoryRefactoringForSync::signals::StopProcess>* ChassisShelf__Delegatee::get_pInStopProcess() {
	component->pInStopProcess.inIntf = this;
	return this;
}

/**
 * 
 * @return ret 
 */
 IPush<LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop>* ChassisShelf__Delegatee::get_pInRestart() {
	component->pInRestart.inIntf = this;
	return this;
}

/**
 * 
 * @return ret 
 */
 IPush<CarFactoryLibrary::events::CheckRack>* ChassisShelf__Delegatee::get_pCheckRack() {
	component->pCheckRack.inIntf = this;
	return this;
}

/**
 * 
 * @return ret 
 */
 IPush<CarFactoryLibrary::events::EndOfModule>* ChassisShelf__Delegatee::get_pEndOfMo() {
	component->pEndOfMo.inIntf = this;
	return this;
}

/**
 * 
 * @return ret 
 */
 ::EV3PapyrusLibrary::IColorSensor* ChassisShelf__Delegatee::get_sensor1() {
	component->sensor1.providedIntf = &(component->rack_1.color_sensor);
	return component->sensor1.providedIntf;
}

/**
 * 
 * @return ret 
 */
 ::EV3PapyrusLibrary::IColorSensor* ChassisShelf__Delegatee::get_sensor2() {
	component->sensor2.providedIntf = &(component->rack_1.color_sensor);
	return component->sensor2.providedIntf;
}

/**
 * 
 * @return ret 
 */
 ::EV3PapyrusLibrary::IColorSensor* ChassisShelf__Delegatee::get_sensor3() {
	component->sensor3.providedIntf = &(component->rack_1.color_sensor);
	return component->sensor3.providedIntf;
}

/**
 * 
 * @param ref 
 */
void ChassisShelf__Delegatee::connect_pInStopProcess(IPush<LegoCarFactoryRefactoringForSync::signals::StopProcess>* /*in*/ ref) {
	component->pInStopProcess.outIntf = ref;
}

/**
 * 
 * @param ref 
 */
void ChassisShelf__Delegatee::connect_pErrDetect(IPush<CarFactoryLibrary::events::ErrorDetection>* /*in*/ ref) {
	component->pErrDetect.outIntf = ref;
}

/**
 * 
 * @param ref 
 */
void ChassisShelf__Delegatee::connect_pPickPiece(IPush<CarFactoryLibrary::events::RoboticArmPickPiece>* /*in*/ ref) {
	component->pPickPiece.outIntf = ref;
}

/**
 * 
 * @param ref 
 */
void ChassisShelf__Delegatee::connect_pLCD(::EV3PapyrusLibrary::Interfaces::EV3Brick::ILcd* /*in*/ ref) {
	component->pLCD.requiredIntf = ref;
}

/**
 * 
 * @param ref 
 */
void ChassisShelf__Delegatee::connect_pModule(::CarFactoryLibrary::IModule* /*in*/ ref) {
	component->pModule.requiredIntf = ref;
}



} // of namespace Chassis
} // of namespace __Architecture__Delegatee
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
              End of ChassisShelf__Delegatee class body
 ************************************************************/
