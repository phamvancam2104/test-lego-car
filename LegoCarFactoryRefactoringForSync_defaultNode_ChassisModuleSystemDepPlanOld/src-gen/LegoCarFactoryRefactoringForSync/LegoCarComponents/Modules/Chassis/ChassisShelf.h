// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef LEGOCARFACTORYREFACTORINGFORSYNC_LEGOCARCOMPONENTS_MODULES_CHASSIS_CHASSISSHELF_H
#define LEGOCARFACTORYREFACTORINGFORSYNC_LEGOCARCOMPONENTS_MODULES_CHASSIS_CHASSISSHELF_H

/************************************************************
 ChassisShelf class header
 ************************************************************/

#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Chassis/Pkg_Chassis.h"

#include "AnsiCLibrary/Pkg_AnsiCLibrary.h"
#include "CarFactoryLibrary/Shelf.h"
#include "LegoCarFactoryRefactoringForSync/__Architecture__Controller/ChassisChassisShelf__Controller.h"

// Include from Include stereotype (header)
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class StopProcess;
}
}
namespace LegoCarFactoryRefactoringForSync {
namespace signals {
class RestartAfterEmergencyStop;
}
}
namespace CarFactoryLibrary {
namespace events {
class CheckRack;
}
}
namespace CarFactoryLibrary {
namespace events {
class EndOfModule;
}
}
namespace CarFactoryLibrary {
namespace events {
class ErrorDetection;
}
}
namespace CarFactoryLibrary {
namespace events {
class RoboticArmPickPiece;
}
}

// End of Include stereotype (header)

namespace LegoCarFactoryRefactoringForSync {
namespace LegoCarComponents {
namespace Modules {
namespace Chassis {

/************************************************************/
/**
 * 
 */
class ChassisShelf: public ::CarFactoryLibrary::Shelf {
public:
	/**
	 * 
	 */
	::LegoCarFactoryRefactoringForSync::__Architecture__Controller::ChassisChassisShelf__Controller chassisshelfController;

	StateMachine ChassisShelfStateMachine {
		InitialState PrincipalState {
			PseudoChoice Which_rack;
			PseudoChoice test;
			State Not_Master_Module;
			State WaitSlaveIsNotBusy;
			PseudoChoice choice;
			State Wait_end;
			State Empty_rack;
			State Display;
			InitialState Initialization;
			State First_rack;
			State Second_rack;
		};
		State Restart;
		FinalState FinalState1;
		SignalEvent<CarFactoryLibrary::events::CheckRack> CheckRack;
		SignalEvent<CarFactoryLibrary::events::EndOfModule> EndOfModule;
		SignalEvent<LegoCarFactoryRefactoringForSync::signals::StopProcess> StopProcess;
		SignalEvent<LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop> RestartAfterEmergencyStop;
		TransitionTable {
			//For external transtition: ExT(name, source, target, guard, event, effect)
			//For local transtition: LoT(name, source, target, guard, event, effect)
			//For internal transtition: ExT(name, source, guard, event, effect)
			ExT(fromPrincipalStatetoRestart , PrincipalState , Restart , NULL , StopProcess , NULL );
			ExT(fromPrincipalStatetoFinalState1 , PrincipalState , FinalState1 , NULL , NULL , NULL );
			ExT(fromNot_Master_ModuletoWaitSlaveIsNotBusy , Not_Master_Module , WaitSlaveIsNotBusy , NULL , NULL , NULL );
			ExT(fromWaitSlaveIsNotBusytoChoice , WaitSlaveIsNotBusy , choice , NULL , NULL , NULL );
			ExT(fromWait_endtoInitialization , Wait_end , Initialization , NULL , EndOfModule , NULL );
			ExT(fromEmpty_racktoWait_end , Empty_rack , Wait_end , NULL , NULL , NULL );
			ExT(fromDisplaytoTest , Display , test , NULL , NULL , NULL );
			ExT(fromInitializationtoDisplay , Initialization , Display , NULL , CheckRack , NULL );
			ExT(fromFirst_racktoWait_end , First_rack , Wait_end , NULL , NULL , NULL );
			ExT(fromSecond_racktoWait_end , Second_rack , Wait_end , NULL , NULL , NULL );
			ExT(fromRestarttoPrincipalState , Restart , PrincipalState , NULL , RestartAfterEmergencyStop , NULL );
			ExT(fromWhich_racktoFirst_rack , Which_rack , First_rack , fromWhich_racktoFirst_rackGuard , NULL , NULL );
			ExT(fromWhich_racktoEmpty_rack , Which_rack , Empty_rack , NULL , NULL , NULL );
			ExT(fromWhich_racktoSecond_rack , Which_rack , Second_rack , fromWhich_racktoSecond_rackGuard , NULL , NULL );
			ExT(fromTesttoNot_Master_Module , test , Not_Master_Module , fromTesttoNot_Master_ModuleGuard , NULL , NULL );
			ExT(fromTesttoWhich_rack , test , Which_rack , NULL , NULL , NULL );
			ExT(fromChoicetoWait_end , choice , Wait_end , fromChoicetoWait_endGuard , NULL , NULL );
			ExT(fromChoicetoRestart , choice , Restart , NULL , NULL , NULL );
			ExT(fromChoicetoEmpty_rack , choice , Empty_rack , fromChoicetoEmpty_rackGuard , NULL , NULL );
		}
	};
	/**
	 * 
	 */
	InFlowPort<LegoCarFactoryRefactoringForSync::signals::StopProcess> pInStopProcess;
	/**
	 * 
	 */
	InFlowPort<
			LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop> pInRestart;
	/**
	 * 
	 */
	InFlowPort<CarFactoryLibrary::events::CheckRack> pCheckRack;
	/**
	 * 
	 */
	InFlowPort<CarFactoryLibrary::events::EndOfModule> pEndOfMo;
	/**
	 * 
	 */
	OutFlowPort<CarFactoryLibrary::events::ErrorDetection> pErrDetect;
	/**
	 * 
	 */
	OutFlowPort<CarFactoryLibrary::events::RoboticArmPickPiece> pPickPiece;
	/**
	 * 
	 * @return ret 
	 */
	bool fromWhich_racktoSecond_rackGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoicetoWait_endGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromChoicetoEmpty_rackGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromTesttoNot_Master_ModuleGuard();
	/**
	 * 
	 * @return ret 
	 */
	bool fromWhich_racktoFirst_rackGuard();
	/**
	 * 
	 */
	ChassisShelf();

};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of namespace Chassis
} // of namespace Modules
} // of namespace LegoCarComponents
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
 End of ChassisShelf class header
 ************************************************************/

#endif
