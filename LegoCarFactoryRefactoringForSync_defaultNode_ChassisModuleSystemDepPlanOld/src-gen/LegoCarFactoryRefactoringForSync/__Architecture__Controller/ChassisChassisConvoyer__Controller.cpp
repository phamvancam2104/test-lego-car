// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define LegoCarFactoryRefactoringForSync___Architecture__Controller_ChassisChassisConvoyer__Controller_BODY

/************************************************************
 ChassisChassisConvoyer__Controller class body
 ************************************************************/

// include associated header file
#include "LegoCarFactoryRefactoringForSync/__Architecture__Controller/ChassisChassisConvoyer__Controller.h"

// Derived includes directives
#include "CarFactoryLibrary/events/CheckRack.h"
#include "CarFactoryLibrary/events/DeliveredCarConveyor.h"
#include "CarFactoryLibrary/events/EndOfModule.h"
#include "CarFactoryLibrary/events/ErrorDetection.h"
#include "EV3PapyrusLibrary/IColorSensor.h"
#include "EV3PapyrusLibrary/Interfaces/Actuators/ILargeMotor.h"
#include "LegoCarFactoryRefactoringForSync/LegoCarComponents/Modules/Chassis/ChassisConvoyer.h"
#include "LegoCarFactoryRefactoringForSync/signals/PrepareConveyor.h"
#include "LegoCarFactoryRefactoringForSync/signals/RestartAfterEmergencyStop.h"
#include "LegoCarFactoryRefactoringForSync/signals/StopProcess.h"
#include "statemachine/Pkg_statemachine.h"

namespace LegoCarFactoryRefactoringForSync {
namespace __Architecture__Controller {

// static attributes (if any)

/**
 * 
 */
void ChassisChassisConvoyer__Controller::dispatchEvent() {
	bool popDeferred = false;
	dispatchFlag = true;

	//initialze root active state
	//execute initial effect
	ChassisConveyorStateMachine_Region1_Enter (CHASSISCONVOYER_CHASSISCONVEYORSTATEMACHINE_REGION1_DEFAULT);

	while (systemState != statemachine::STOPPED) {
		//run-to-completion: need to have a mutex here
		currentEvent = eventQueue.pop(popDeferred);
		if (currentEvent != NULL) {
			CHASSISCHASSISCONVOYER__CONTROLLER_GET_CONTROL
			switch (currentEvent->eventID) {
			case PREPARECONVEYOR_ID:
				::LegoCarFactoryRefactoringForSync::signals::PrepareConveyor sig_PREPARECONVEYOR_ID;
				memcpy(&sig_PREPARECONVEYOR_ID, currentEvent->data,
						sizeof(::LegoCarFactoryRefactoringForSync::signals::PrepareConveyor));
				processPrepareConveyor(sig_PREPARECONVEYOR_ID);
				break;
			case DELIVEREDCARCONVEYOR_ID:
				::CarFactoryLibrary::events::DeliveredCarConveyor sig_DELIVEREDCARCONVEYOR_ID;
				memcpy(&sig_DELIVEREDCARCONVEYOR_ID, currentEvent->data,
						sizeof(::CarFactoryLibrary::events::DeliveredCarConveyor));
				processDeliveredCarConveyor(sig_DELIVEREDCARCONVEYOR_ID);
				break;
			case STOPPROCESS_ID:
				::LegoCarFactoryRefactoringForSync::signals::StopProcess sig_STOPPROCESS_ID;
				memcpy(&sig_STOPPROCESS_ID, currentEvent->data,
						sizeof(::LegoCarFactoryRefactoringForSync::signals::StopProcess));
				processStopProcess(sig_STOPPROCESS_ID);
				break;
			case RESTARTAFTEREMERGENCYSTOP_ID:
				::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop sig_RESTARTAFTEREMERGENCYSTOP_ID;
				memcpy(&sig_RESTARTAFTEREMERGENCYSTOP_ID, currentEvent->data,
						sizeof(::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop));
				processRestartAfterEmergencyStop(
						sig_RESTARTAFTEREMERGENCYSTOP_ID);
				break;
			case COMPLETIONEVENT_ID:
				processCompletionEvent();
				break;
			}
			if (systemState == statemachine::EVENT_DEFERRED) {
				eventQueue.saveDeferred(*currentEvent);
			}
			popDeferred = (systemState != statemachine::EVENT_DEFERRED);
			systemState = statemachine::IDLE;
			CHASSISCHASSISCONVOYER__CONTROLLER_RELEASE_CONTROL
		}
	}
}

/**
 * 
 * @param enter_mode 
 */
void ChassisChassisConvoyer__Controller::ChassisConveyorStateMachine_Region1_Enter(
		char /*in*/enter_mode) {
	switch (enter_mode) {
	case CHASSISCONVOYER_CHASSISCONVEYORSTATEMACHINE_REGION1_DEFAULT:
		activeStateID = PRINCIPALSTATE_ID;

		PrincipalState_Region1_Enter (CHASSISCONVOYER_PRINCIPALSTATE_REGION1_DEFAULT);
		//TODO: set systemState to EVENT_CONSUMED
		break;
	case CHASSISCONVOYER_CHASSISCONVEYORSTATEMACHINE_REGION1_RESTART:
		activeStateID = RESTART_ID;
		//starting the counters for time events
		//TODO: set systemState to EVENT_CONSUMED
		break;
	}
}

/**
 * 
 * @param enter_mode 
 */
void ChassisChassisConvoyer__Controller::PrincipalState_Region1_Enter(
		char /*in*/enter_mode) {
	switch (enter_mode) {
	case CHASSISCONVOYER_PRINCIPALSTATE_REGION1_DEFAULT:
		states[PRINCIPALSTATE_ID].actives[0] = GO_STOP_POSITION_ID;

		//TODO: set systemState to EVENT_CONSUMED
		break;
	case CHASSISCONVOYER_PRINCIPALSTATE_REGION1_GO_STOP_POSITION:
		states[PRINCIPALSTATE_ID].actives[0] = GO_STOP_POSITION_ID;
		//starting the counters for time events
		//TODO: set systemState to EVENT_CONSUMED
		break;
	}
}

/**
 * 
 */
void ChassisChassisConvoyer__Controller::PrincipalState_Region1_Exit() {
	//exiting region Region1
	if (states[PRINCIPALSTATE_ID].actives[0] != STATE_MAX) {
		//signal to exit the doActivity of sub-state of PrincipalState
		setFlag(states[PRINCIPALSTATE_ID].actives[0],
				statemachine::TF_DO_ACTIVITY, false);
		if (GO_STOP_POSITION_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else if (REWIND_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else if (REPLACE_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else if (GO_CHECK_PRESENCE_POSITION_ID
				== states[PRINCIPALSTATE_ID].actives[0]) {
		} else if (MISPLACE_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else if (DELIVER_CAR_ID == states[PRINCIPALSTATE_ID].actives[0]) {
		} else if (SENDENDOFMODULEEVENT_ID
				== states[PRINCIPALSTATE_ID].actives[0]) {
		} else if (GO_WAIT_POSITION_ID
				== states[PRINCIPALSTATE_ID].actives[0]) {
		} else if (SENDLOADCARCOMMAND_ID
				== states[PRINCIPALSTATE_ID].actives[0]) {
		} else if (WAITSLAVEISNOTBUSY_ID
				== states[PRINCIPALSTATE_ID].actives[0]) {
		} else if (SENDDELIVERCOMMAND_ID
				== states[PRINCIPALSTATE_ID].actives[0]) {
		} else if (WAITSLAVEISNOTBUSY2_ID
				== states[PRINCIPALSTATE_ID].actives[0]) {
		}
		//exit action of sub-state of PrincipalState
		StateExit(states[PRINCIPALSTATE_ID].actives[0]);
		//set active sub-state of PrincipalState to STATE_MAX meaning NULL
		states[PRINCIPALSTATE_ID].actives[0] = STATE_MAX;
	}
}

/**
 * 
 * @param origin 
 */
ChassisChassisConvoyer__Controller::ChassisChassisConvoyer__Controller(
		::LegoCarFactoryRefactoringForSync::LegoCarComponents::Modules::Chassis::ChassisConvoyer* /*in*/origin) :
		eventQueue(50, eventArray), p_origin(origin) {
	//startBehavior();
}

/**
 * 
 */
void ChassisChassisConvoyer__Controller::startBehavior() {
	systemState = statemachine::IDLE;

	// initialize all threads, the threads wait until the associated flag is set
	for (int i = 0; i < (int) STATE_MAX; i++) {
		if (states[i].hasDoActivity) {
			threadStructs[i].id = i;
			threadStructs[i].ptr = this;
			threadStructs[i].func_type = statemachine::TF_DO_ACTIVITY;
			mutexes[i] = PTHREAD_MUTEX_INITIALIZER;
			conds[i] = PTHREAD_COND_INITIALIZER;
			pthread_create(&threads[i], NULL,
					&ChassisChassisConvoyer__Controller::thread_func_wrapper,
					&threadStructs[i]);
		}
	}

	runToCompletionMutex = PTHREAD_MUTEX_INITIALIZER;
	runToCompletionCond = PTHREAD_COND_INITIALIZER;

	dispatchStruct = statemachine::StructForThread_t(this, 0, 0,
			statemachine::TF_STATE_MACHINE_TYPE, 0);
	ChassisChassisConvoyer__Controller_THREAD_CREATE(dispatchThread,
			dispatchStruct)
}

/**
 * 
 */
ChassisChassisConvoyer__Controller::~ChassisChassisConvoyer__Controller() {
	stopBehavior();
}

/**
 * 
 */
void ChassisChassisConvoyer__Controller::stopBehavior() {
	systemState = statemachine::STOPPED;
	//signal and wait for doActivity termination
	for (int i = 0; i < (int) STATE_MAX; i++) {
		if (states[i].hasDoActivity) {
			pthread_cond_signal (&conds[i]);
			pthread_join(threads[i], NULL);
		}
	}

	//signal and wait for time event thread termination

	//main thread
	pthread_join(dispatchThread, NULL);

}

/**
 * 
 * @param sig 
 */
void ChassisChassisConvoyer__Controller::processPrepareConveyor(
		::LegoCarFactoryRefactoringForSync::signals::PrepareConveyor& /*in*/sig) {
	systemState = statemachine::EVENT_PROCESSING;
	if (states[PRINCIPALSTATE_ID].actives[0] == GO_STOP_POSITION_ID) {
		//from go_stop_position to choice0
		if (true) {
			if (p_origin->fromChoice0toGo_wait_positionGuard()) {
				states[PRINCIPALSTATE_ID].actives[0] = GO_WAIT_POSITION_ID;
				//starting the counters for time events
				//start activity of go_wait_position by calling setFlag
				setFlag(GO_WAIT_POSITION_ID, statemachine::TF_DO_ACTIVITY,
						true);
			} else {
				states[PRINCIPALSTATE_ID].actives[0] = SENDLOADCARCOMMAND_ID;
				//starting the counters for time events
				//start activity of SendLoadCarCommand by calling setFlag
				setFlag(SENDLOADCARCOMMAND_ID, statemachine::TF_DO_ACTIVITY,
						true);
			}
			systemState = statemachine::EVENT_CONSUMED;
		}
	}
}

/**
 * 
 * @param sig 
 */
void ChassisChassisConvoyer__Controller::push(
		::LegoCarFactoryRefactoringForSync::signals::PrepareConveyor& /*in*/sig) {
	eventQueue.push(statemachine::PRIORITY_2, &sig, PREPARECONVEYOR_ID,
			statemachine::SIGNAL_EVENT, 0,
			sizeof(::LegoCarFactoryRefactoringForSync::signals::PrepareConveyor));
}

/**
 * 
 * @param sig 
 */
void ChassisChassisConvoyer__Controller::processDeliveredCarConveyor(
		::CarFactoryLibrary::events::DeliveredCarConveyor& /*in*/sig) {
	systemState = statemachine::EVENT_PROCESSING;
	if (states[PRINCIPALSTATE_ID].actives[0] == REWIND_ID) {
		//from Rewind to choice1
		if (true) {
			if (p_origin->fromChoice1toReplaceGuard()) {
				states[PRINCIPALSTATE_ID].actives[0] = REPLACE_ID;
				//starting the counters for time events
				//start activity of replace by calling setFlag
				setFlag(REPLACE_ID, statemachine::TF_DO_ACTIVITY, true);
			} else {
				states[PRINCIPALSTATE_ID].actives[0] = SENDDELIVERCOMMAND_ID;
				//starting the counters for time events
				//start activity of SendDeliverCommand by calling setFlag
				setFlag(SENDDELIVERCOMMAND_ID, statemachine::TF_DO_ACTIVITY,
						true);
			}
			systemState = statemachine::EVENT_CONSUMED;
		}
	}
}

/**
 * 
 * @param sig 
 */
void ChassisChassisConvoyer__Controller::push(
		::CarFactoryLibrary::events::DeliveredCarConveyor& /*in*/sig) {
	eventQueue.push(statemachine::PRIORITY_2, &sig, DELIVEREDCARCONVEYOR_ID,
			statemachine::SIGNAL_EVENT, 0,
			sizeof(::CarFactoryLibrary::events::DeliveredCarConveyor));
}

/**
 * 
 * @param sig 
 */
void ChassisChassisConvoyer__Controller::processStopProcess(
		::LegoCarFactoryRefactoringForSync::signals::StopProcess& /*in*/sig) {
	systemState = statemachine::EVENT_PROCESSING;
	if (systemState == statemachine::EVENT_PROCESSING) {
		switch (activeStateID) {
		case PRINCIPALSTATE_ID:
			//from PrincipalState to Restart
			if (true) {
				PrincipalState_Region1_Exit();
				activeStateID = RESTART_ID;
				//starting the counters for time events
				systemState = statemachine::EVENT_CONSUMED;
			}
			break;
		default:
			//do nothing
			break;
		}
	}
}

/**
 * 
 * @param sig 
 */
void ChassisChassisConvoyer__Controller::push(
		::LegoCarFactoryRefactoringForSync::signals::StopProcess& /*in*/sig) {
	eventQueue.push(statemachine::PRIORITY_2, &sig, STOPPROCESS_ID,
			statemachine::SIGNAL_EVENT, 0,
			sizeof(::LegoCarFactoryRefactoringForSync::signals::StopProcess));
}

/**
 * 
 * @param sig 
 */
void ChassisChassisConvoyer__Controller::processRestartAfterEmergencyStop(
		::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop& /*in*/sig) {
	systemState = statemachine::EVENT_PROCESSING;
	if (systemState == statemachine::EVENT_PROCESSING) {
		switch (activeStateID) {
		case RESTART_ID:
			//from Restart to PrincipalState
			if (true) {
				activeStateID = PRINCIPALSTATE_ID;
				//starting the counters for time events
				PrincipalState_Region1_Enter (CHASSISCONVOYER_PRINCIPALSTATE_REGION1_DEFAULT);
				systemState = statemachine::EVENT_CONSUMED;
			}
			break;
		default:
			//do nothing
			break;
		}
	}
}

/**
 * 
 * @param sig 
 */
void ChassisChassisConvoyer__Controller::push(
		::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop& /*in*/sig) {
	eventQueue.push(statemachine::PRIORITY_2, &sig,
			RESTARTAFTEREMERGENCYSTOP_ID, statemachine::SIGNAL_EVENT, 0,
			sizeof(::LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop));
}

/**
 * 
 */
void ChassisChassisConvoyer__Controller::processCompletionEvent() {
	systemState = statemachine::EVENT_PROCESSING;
	if (states[PRINCIPALSTATE_ID].actives[0] == MISPLACE_ID
			&& (currentEvent->associatedState == MISPLACE_ID)) {
		//from Misplace to Restart
		if (true) {
			PrincipalState_Region1_Exit();
			activeStateID = RESTART_ID;
			//starting the counters for time events
			systemState = statemachine::EVENT_CONSUMED;
		}
	} else if (states[PRINCIPALSTATE_ID].actives[0] == SENDENDOFMODULEEVENT_ID
			&& (currentEvent->associatedState == SENDENDOFMODULEEVENT_ID)) {
		//from SendEndOfModuleEvent to go_stop_position
		if (true) {
			states[PRINCIPALSTATE_ID].actives[0] = GO_STOP_POSITION_ID;
			//starting the counters for time events
			systemState = statemachine::EVENT_CONSUMED;
		}
	} else if (states[PRINCIPALSTATE_ID].actives[0] == REPLACE_ID
			&& (currentEvent->associatedState == REPLACE_ID)) {
		//from replace to go_check_presence_position
		if (true) {
			states[PRINCIPALSTATE_ID].actives[0] =
					GO_CHECK_PRESENCE_POSITION_ID;
			//starting the counters for time events
			//start activity of go_check_presence_position by calling setFlag
			setFlag(GO_CHECK_PRESENCE_POSITION_ID, statemachine::TF_DO_ACTIVITY,
					true);
			systemState = statemachine::EVENT_CONSUMED;
		}
	} else if (states[PRINCIPALSTATE_ID].actives[0]
			== GO_CHECK_PRESENCE_POSITION_ID
			&& (currentEvent->associatedState == GO_CHECK_PRESENCE_POSITION_ID)) {
		//from go_check_presence_position to choice2
		if (true) {
			if (p_origin->fromChoice2toMisplaceGuard()) {
				states[PRINCIPALSTATE_ID].actives[0] = MISPLACE_ID;
				//starting the counters for time events
				//start activity of Misplace by calling setFlag
				setFlag(MISPLACE_ID, statemachine::TF_DO_ACTIVITY, true);
			} else {
				states[PRINCIPALSTATE_ID].actives[0] = DELIVER_CAR_ID;
				//starting the counters for time events
				//start activity of Deliver_car by calling setFlag
				setFlag(DELIVER_CAR_ID, statemachine::TF_DO_ACTIVITY, true);
			}
			systemState = statemachine::EVENT_CONSUMED;
		}
	} else if (states[PRINCIPALSTATE_ID].actives[0] == DELIVER_CAR_ID
			&& (currentEvent->associatedState == DELIVER_CAR_ID)) {
		//from Deliver_car to SendEndOfModuleEvent
		if (true) {
			states[PRINCIPALSTATE_ID].actives[0] = SENDENDOFMODULEEVENT_ID;
			//starting the counters for time events
			//start activity of SendEndOfModuleEvent by calling setFlag
			setFlag(SENDENDOFMODULEEVENT_ID, statemachine::TF_DO_ACTIVITY,
					true);
			systemState = statemachine::EVENT_CONSUMED;
		}
	} else if (states[PRINCIPALSTATE_ID].actives[0] == SENDLOADCARCOMMAND_ID
			&& (currentEvent->associatedState == SENDLOADCARCOMMAND_ID)) {
		//from SendLoadCarCommand to WaitSlaveIsNotBusy
		if (true) {
			states[PRINCIPALSTATE_ID].actives[0] = WAITSLAVEISNOTBUSY_ID;
			//starting the counters for time events
			//start activity of WaitSlaveIsNotBusy by calling setFlag
			setFlag(WAITSLAVEISNOTBUSY_ID, statemachine::TF_DO_ACTIVITY, true);
			systemState = statemachine::EVENT_CONSUMED;
		}
	} else if (states[PRINCIPALSTATE_ID].actives[0] == WAITSLAVEISNOTBUSY_ID
			&& (currentEvent->associatedState == WAITSLAVEISNOTBUSY_ID)) {
		//from WaitSlaveIsNotBusy to choice3
		if (true) {
			if (p_origin->fromChoice3toGo_wait_positionGuard()) {
				states[PRINCIPALSTATE_ID].actives[0] = GO_WAIT_POSITION_ID;
				//starting the counters for time events
				//start activity of go_wait_position by calling setFlag
				setFlag(GO_WAIT_POSITION_ID, statemachine::TF_DO_ACTIVITY,
						true);
			} else {
				PrincipalState_Region1_Exit();
				activeStateID = RESTART_ID;
				//starting the counters for time events
			}
			systemState = statemachine::EVENT_CONSUMED;
		}
	} else if (states[PRINCIPALSTATE_ID].actives[0] == GO_WAIT_POSITION_ID
			&& (currentEvent->associatedState == GO_WAIT_POSITION_ID)) {
		//from go_wait_position to Rewind
		if (true) {
			states[PRINCIPALSTATE_ID].actives[0] = REWIND_ID;
			//starting the counters for time events
			systemState = statemachine::EVENT_CONSUMED;
		}
	} else if (states[PRINCIPALSTATE_ID].actives[0] == SENDDELIVERCOMMAND_ID
			&& (currentEvent->associatedState == SENDDELIVERCOMMAND_ID)) {
		//from SendDeliverCommand to WaitSlaveIsNotBusy2
		if (true) {
			states[PRINCIPALSTATE_ID].actives[0] = WAITSLAVEISNOTBUSY2_ID;
			//starting the counters for time events
			//start activity of WaitSlaveIsNotBusy2 by calling setFlag
			setFlag(WAITSLAVEISNOTBUSY2_ID, statemachine::TF_DO_ACTIVITY, true);
			systemState = statemachine::EVENT_CONSUMED;
		}
	} else if (states[PRINCIPALSTATE_ID].actives[0] == WAITSLAVEISNOTBUSY2_ID
			&& (currentEvent->associatedState == WAITSLAVEISNOTBUSY2_ID)) {
		//from WaitSlaveIsNotBusy2 to choice
		if (true) {
			if (p_origin->fromChoicetoSendEndOfModuleEventGuard()) {
				states[PRINCIPALSTATE_ID].actives[0] = SENDENDOFMODULEEVENT_ID;
				//starting the counters for time events
				//start activity of SendEndOfModuleEvent by calling setFlag
				setFlag(SENDENDOFMODULEEVENT_ID, statemachine::TF_DO_ACTIVITY,
						true);
			} else if (p_origin->fromChoicetoMisplaceGuard()) {
				states[PRINCIPALSTATE_ID].actives[0] = MISPLACE_ID;
				//starting the counters for time events
				//start activity of Misplace by calling setFlag
				setFlag(MISPLACE_ID, statemachine::TF_DO_ACTIVITY, true);
			} else {
				PrincipalState_Region1_Exit();
				p_origin->effectFromChoicetoRestart();
				activeStateID = RESTART_ID;
				//starting the counters for time events
			}
			systemState = statemachine::EVENT_CONSUMED;
		}
	}
}

/**
 * 
 * @param id 
 */
void ChassisChassisConvoyer__Controller::StateEntry(unsigned int /*in*/id) {
	switch (id) {
	default:
		//do nothing
		break;
	}
}

/**
 * 
 * @param id 
 */
void ChassisChassisConvoyer__Controller::StateExit(unsigned int /*in*/id) {
	switch (id) {
	default:
		//do nothing
		break;
	}
}

/**
 * 
 * @param id 
 */
void ChassisChassisConvoyer__Controller::StateDoActivity(
		unsigned int /*in*/id) {
	switch (id) {
	default:
		//do nothing
		break;
	}
}

/**
 * 
 * @param data 
 * @return ret 
 */
void* ChassisChassisConvoyer__Controller::thread_func_wrapper(
		void* /*in*/data) {
	statemachine::StructForThread_t* cptr =
			(statemachine::StructForThread_t*) data;
	ChassisChassisConvoyer__Controller* ptr =
			(ChassisChassisConvoyer__Controller*) cptr->ptr;
	switch (cptr->func_type) {
	case statemachine::TF_STATE_MACHINE_TYPE:
		ptr->dispatchEvent();
		break;
	}
	return NULL;
}

/**
 * 
 * @param id 
 */
void ChassisChassisConvoyer__Controller::doCallActivity(int /*in*/id) {
	flags[id] = false;
	while (systemState != statemachine::STOPPED) {
		pthread_mutex_lock (&mutexes[id]);
		while (!flags[id] && systemState != statemachine::STOPPED) {
			pthread_cond_wait(&conds[id], &mutexes[id]);
		}
		if (systemState != statemachine::STOPPED) {
			StateDoActivity(id);
		}
		bool commitEvent = false;
		if (flags[id]) {
			commitEvent = true;
			flags[id] = false;
		}
		pthread_cond_signal (&conds[id]);
		pthread_mutex_unlock(&mutexes[id]);
		if (commitEvent && systemState != statemachine::STOPPED) {
			if (id == REPLACE_ID || id == GO_CHECK_PRESENCE_POSITION_ID
					|| id == MISPLACE_ID || id == DELIVER_CAR_ID
					|| id == SENDENDOFMODULEEVENT_ID
					|| id == GO_WAIT_POSITION_ID || id == SENDLOADCARCOMMAND_ID
					|| id == WAITSLAVEISNOTBUSY_ID
					|| id == SENDDELIVERCOMMAND_ID
					|| id == WAITSLAVEISNOTBUSY2_ID) {
				//processCompletionEvent();
				eventQueue.push(statemachine::PRIORITY_1, NULL,
						COMPLETIONEVENT_ID, statemachine::COMPLETION_EVENT, id);
			}
		}
	}
}

/**
 * 
 * @param id 
 * @param func_type 
 * @param value 
 */
void ChassisChassisConvoyer__Controller::setFlag(int /*in*/id,
		char /*in*/func_type, bool /*in*/value) {
	//value = true => start activity
	//value = false => stop activity
	if (func_type == statemachine::TF_DO_ACTIVITY) {
		//push completion event
		if (value) {
			if (id == REPLACE_ID || id == GO_CHECK_PRESENCE_POSITION_ID
					|| id == MISPLACE_ID || id == DELIVER_CAR_ID
					|| id == SENDENDOFMODULEEVENT_ID
					|| id == GO_WAIT_POSITION_ID || id == SENDLOADCARCOMMAND_ID
					|| id == WAITSLAVEISNOTBUSY_ID
					|| id == SENDDELIVERCOMMAND_ID
					|| id == WAITSLAVEISNOTBUSY2_ID) {
				eventQueue.push(statemachine::PRIORITY_1, NULL,
						COMPLETIONEVENT_ID, statemachine::COMPLETION_EVENT, id);
			}
			return;
		}
	}
}

/**
 * 
 * @return ret 
 */
IPush<LegoCarFactoryRefactoringForSync::signals::StopProcess>* ChassisChassisConvoyer__Controller::get_pStopProcess() {
	p_origin->pStopProcess.inIntf = this;
	return this;
}

/**
 * 
 * @return ret 
 */
IPush<LegoCarFactoryRefactoringForSync::signals::RestartAfterEmergencyStop>* ChassisChassisConvoyer__Controller::get_pRestart() {
	p_origin->pRestart.inIntf = this;
	return this;
}

/**
 * 
 * @return ret 
 */
IPush<LegoCarFactoryRefactoringForSync::signals::PrepareConveyor>* ChassisChassisConvoyer__Controller::get_pPrepare() {
	p_origin->pPrepare.inIntf = this;
	return this;
}

/**
 * 
 * @return ret 
 */
IPush<CarFactoryLibrary::events::DeliveredCarConveyor>* ChassisChassisConvoyer__Controller::get_pDelivered() {
	p_origin->pDelivered.inIntf = this;
	return this;
}

/**
 * 
 * @return ret 
 */
::EV3PapyrusLibrary::IColorSensor* ChassisChassisConvoyer__Controller::get_sensor() {
	p_origin->sensor.providedIntf = &(p_origin->color_sensor);
	return p_origin->sensor.providedIntf;
}

/**
 * 
 * @return ret 
 */
::EV3PapyrusLibrary::Interfaces::Actuators::ILargeMotor* ChassisChassisConvoyer__Controller::get_pMotor() {
	p_origin->pMotor.providedIntf = &(p_origin->motor);
	return p_origin->pMotor.providedIntf;
}

/**
 * 
 * @param ref 
 */
void ChassisChassisConvoyer__Controller::connect_pStopProcess(
		IPush<LegoCarFactoryRefactoringForSync::signals::StopProcess>* /*in*/ref) {
	p_origin->pStopProcess.outIntf = ref;
}

/**
 * 
 * @param ref 
 */
void ChassisChassisConvoyer__Controller::connect_pCheckRack(
		IPush<CarFactoryLibrary::events::CheckRack>* /*in*/ref) {
	p_origin->pCheckRack.outIntf = ref;
}

/**
 * 
 * @param ref 
 */
void ChassisChassisConvoyer__Controller::connect_pErrDetect(
		IPush<CarFactoryLibrary::events::ErrorDetection>* /*in*/ref) {
	p_origin->pErrDetect.outIntf = ref;
}

/**
 * 
 * @param ref 
 */
void ChassisChassisConvoyer__Controller::connect_pEndOfMo_Control(
		IPush<CarFactoryLibrary::events::EndOfModule>* /*in*/ref) {
	p_origin->pEndOfMo_Control.outIntf = ref;
}

/**
 * 
 * @param ref 
 */
void ChassisChassisConvoyer__Controller::connect_pEndOfMo_Shelf(
		IPush<CarFactoryLibrary::events::EndOfModule>* /*in*/ref) {
	p_origin->pEndOfMo_Shelf.outIntf = ref;
}

/**
 * 
 * @param ref 
 */
void ChassisChassisConvoyer__Controller::connect_pEndOfMo_Robotic(
		IPush<CarFactoryLibrary::events::EndOfModule>* /*in*/ref) {
	p_origin->pEndOfMo_Robotic.outIntf = ref;
}

} // of namespace __Architecture__Controller
} // of namespace LegoCarFactoryRefactoringForSync

/************************************************************
 End of ChassisChassisConvoyer__Controller class body
 ************************************************************/
