// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define CarFactoryLibrary_Shelf_BODY

/************************************************************
 Shelf class body
 ************************************************************/

// include associated header file
#include "CarFactoryLibrary/Shelf.h"

// Derived includes directives
#include "CarFactoryLibrary/IModule.h"
#include "CarFactoryLibrary/events/CheckRack.h"
#include "CarFactoryLibrary/events/EndOfModule.h"
#include "EV3PapyrusLibrary/IColorSensor.h"
#include "EV3PapyrusLibrary/Interfaces/EV3Brick/ILcd.h"

namespace CarFactoryLibrary {

// static attributes (if any)

/**
 * check if the rack number rack_number is empty
 * @param rack_number rack number to check
 * @return ret true if the rack is empty  and false otherwise
 */
bool Shelf::is_empty(int /*in*/rack_number) {
	if (rack_number == 1) {
		return (&rack_1)->is_empty();
	}
	if (rack_number == 2) {
		return (&rack_2)->is_empty();
	}
	if (rack_number == 3) {
		return (&rack_3)->is_empty();
	}
	return false;
}

/**
 * constructor of the Shelf
 * @param number_rack_sensor number of rack there are
 * @param rack_sensorPort1 port name of rack 1
 * @param rack_sensorPort2 port name of the rack 2
 * @param rack_sensorPort3 port name of the rack 3
 */
Shelf::Shelf(int /*in*/number_rack_sensor,
		::EV3PapyrusLibrary::Types::LocalString /*in*/rack_sensorPort1,
		::EV3PapyrusLibrary::Types::LocalString /*in*/rack_sensorPort2,
		::EV3PapyrusLibrary::Types::LocalString /*in*/rack_sensorPort3) :
		number_rack(number_rack_sensor) {
	if (number_rack == 2) {
		rack_1 = ::CarFactoryLibrary::Rack(rack_sensorPort1);
		rack_2 = ::CarFactoryLibrary::Rack(rack_sensorPort2);
	} else if (number_rack == 3) {
		rack_1 = ::CarFactoryLibrary::Rack(rack_sensorPort1);
		rack_2 = ::CarFactoryLibrary::Rack(rack_sensorPort2);
		rack_3 = ::CarFactoryLibrary::Rack(rack_sensorPort3);
	}

}

/**
 * 
 * @return ret 
 * @param sig 
 */
void Shelf::sendCheckRack(::CarFactoryLibrary::events::CheckRack& /*in*/sig) {
}

/**
 * 
 * @param sig 
 * @return ret 
 */
void Shelf::sendEndOfModule(
		::CarFactoryLibrary::events::EndOfModule& /*in*/sig) {
}

/**
 * 
 */
void Shelf::connectorConfiguration() {
	bindPorts(sensor1, rack_1.sensor);
	bindPorts(sensor2, rack_2.sensor);
	bindPorts(sensor3, rack_3.sensor);
}

} // of namespace CarFactoryLibrary

/************************************************************
 End of Shelf class body
 ************************************************************/
