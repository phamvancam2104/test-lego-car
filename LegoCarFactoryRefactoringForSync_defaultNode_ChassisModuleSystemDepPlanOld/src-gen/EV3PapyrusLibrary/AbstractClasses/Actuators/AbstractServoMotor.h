// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef EV3PAPYRUSLIBRARY_ABSTRACTCLASSES_ACTUATORS_ABSTRACTSERVOMOTOR_H
#define EV3PAPYRUSLIBRARY_ABSTRACTCLASSES_ACTUATORS_ABSTRACTSERVOMOTOR_H

/************************************************************
 AbstractServoMotor class header
 ************************************************************/

#include "EV3PapyrusLibrary/AbstractClasses/Actuators/Pkg_Actuators.h"

#include "AnsiCLibrary/Pkg_AnsiCLibrary.h"
#include "EV3PapyrusLibrary/AbstractClasses/EV3Brick/AbstractDevice.h"
#include "EV3PapyrusLibrary/Types/Pkg_Types.h"
#include "PrimitiveTypes/Pkg_PrimitiveTypes.h"

// Include from Include stereotype (header)
#include <stdint.h>
namespace EV3PapyrusLibrary {
namespace Interfaces {
namespace Actuators {
class IServoMotor;
}
}
}

// End of Include stereotype (header)

namespace EV3PapyrusLibrary {
namespace AbstractClasses {
namespace Actuators {

/************************************************************/
/**
 * 
 */
class AbstractServoMotor: public ::EV3PapyrusLibrary::AbstractClasses::EV3Brick::AbstractDevice {
public:
	/**
	 * 
	 */
	ProvidedPort<EV3PapyrusLibrary::Interfaces::Actuators::IServoMotor> servoMotorPort;
	/**
	 * 
	 * @param v 
	 */
	void set_command(::EV3PapyrusLibrary::Types::LocalString /*in*/v);
	/**
	 * 
	 * @return ret 
	 */
	::EV3PapyrusLibrary::Types::LocalString driver_name();
	/**
	 * 
	 * @return ret 
	 */
	::PrimitiveTypes::Integer max_pulse_sp();
	/**
	 * 
	 * @param v 
	 */
	void set_max_pulse_sp(::PrimitiveTypes::Integer /*in*/v);
	/**
	 * 
	 * @return ret 
	 */
	::PrimitiveTypes::Integer mid_pulse_sp();
	/**
	 * 
	 * @param v 
	 */
	void set_mid_pulse_sp(::PrimitiveTypes::Integer /*in*/v);
	/**
	 * 
	 * @return ret 
	 */
	::PrimitiveTypes::Integer min_pulse_sp();
	/**
	 * 
	 * @param v 
	 */
	void set_min_pulse_sp(::PrimitiveTypes::Integer /*in*/v);
	/**
	 * 
	 * @return ret 
	 */
	::EV3PapyrusLibrary::Types::LocalString polarity();
	/**
	 * 
	 * @param v 
	 */
	void set_polarity(::EV3PapyrusLibrary::Types::LocalString /*in*/v);
	/**
	 * 
	 * @return ret 
	 */
	::EV3PapyrusLibrary::Types::LocalString port_name();
	/**
	 * 
	 * @return ret 
	 */
	::PrimitiveTypes::Integer position_sp();
	/**
	 * 
	 * @param v 
	 */
	void set_position_sp(::PrimitiveTypes::Integer /*in*/v);
	/**
	 * 
	 * @return ret 
	 */
	::PrimitiveTypes::Integer rate_sp();
	/**
	 * 
	 * @param v 
	 */
	void set_rate_sp(::PrimitiveTypes::Integer /*in*/v);
	/**
	 * 
	 * @return ret 
	 */
	::EV3PapyrusLibrary::Types::ModeSet state();
	/**
	 * 
	 * @return ret 
	 */
	void run();
	/**
	 * 
	 * @return ret 
	 */
	void float_();
	/**
	 * 
	 * @return ret 
	 * @param dir 
	 * @param pattern 
	 * @param match 
	 */
	::PrimitiveTypes::Boolean connect(
			::EV3PapyrusLibrary::Types::LocalString& /*in*/dir,
			::EV3PapyrusLibrary::Types::LocalString& /*in*/pattern,
			::EV3PapyrusLibrary::Types::MapStringSetString& /*in*/match);
	/**
	 * 
	 * @return ret 
	 */
	::PrimitiveTypes::Boolean connected();
	/**
	 * 
	 * @return ret 
	 */
	::PrimitiveTypes::Integer device_index();
	/**
	 * 
	 * @return ret 
	 * @param name 
	 */
	::PrimitiveTypes::Integer get_attr_int(
			::EV3PapyrusLibrary::Types::LocalString& /*in*/name);
	/**
	 * 
	 * @return ret 
	 * @param name 
	 * @param value 
	 */
	void set_attr_int(::EV3PapyrusLibrary::Types::LocalString& /*in*/name,
			::PrimitiveTypes::Integer /*in*/value);
	/**
	 * 
	 * @return ret 
	 * @param name 
	 */
	::EV3PapyrusLibrary::Types::LocalString get_attr_string(
			::EV3PapyrusLibrary::Types::LocalString& /*in*/name);
	/**
	 * 
	 * @return ret 
	 * @param name 
	 * @param value 
	 */
	void set_attr_string(::EV3PapyrusLibrary::Types::LocalString& /*in*/name,
			::EV3PapyrusLibrary::Types::LocalString& /*in*/value);
	/**
	 * 
	 * @return ret 
	 * @param name 
	 */
	::EV3PapyrusLibrary::Types::LocalString get_attr_line(
			::EV3PapyrusLibrary::Types::LocalString& /*in*/name);
	/**
	 * 
	 * @return ret 
	 * @param name 
	 * @param pCur 
	 */
	::EV3PapyrusLibrary::Types::ModeSet get_attr_set(
			::EV3PapyrusLibrary::Types::LocalString& /*in*/name,
			::EV3PapyrusLibrary::Types::LocalString* /*in*/pCur);
	/**
	 * 
	 * @return ret 
	 * @param name 
	 */
	::EV3PapyrusLibrary::Types::LocalString get_attr_from_set(
			::EV3PapyrusLibrary::Types::LocalString& /*in*/name);

};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of namespace Actuators
} // of namespace AbstractClasses
} // of namespace EV3PapyrusLibrary

/************************************************************
 End of AbstractServoMotor class header
 ************************************************************/

#endif
