// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef EV3PAPYRUSLIBRARY_ABSTRACTCLASSES_EV3BRICK_ABSTRACTLCD_H
#define EV3PAPYRUSLIBRARY_ABSTRACTCLASSES_EV3BRICK_ABSTRACTLCD_H

/************************************************************
              AbstractLcd class header
 ************************************************************/

#include "EV3PapyrusLibrary/AbstractClasses/EV3Brick/Pkg_EV3Brick.h"

#include "AnsiCLibrary/Pkg_AnsiCLibrary.h"
#include "EV3PapyrusLibrary/Types/Pkg_Types.h"
#include "PrimitiveTypes/Pkg_PrimitiveTypes.h"

// Include from Include stereotype (header)
#include <stdint.h>
namespace EV3PapyrusLibrary {namespace Interfaces {namespace EV3Brick {class ILcd;}}}
#include "EV3PapyrusLibrary/Interfaces/EV3Brick/ILcd.h"

// End of Include stereotype (header)


namespace EV3PapyrusLibrary {
namespace AbstractClasses {
namespace EV3Brick {

/************************************************************/
/**
 * 
 */
class AbstractLcd {
	public:
	/**
	 * 
	 */
	static const int LARGE_LETTER_WIDTH;
	/**
	 * 
	 */
	static const int LARGE_LETTER_HEIGHT;
	/**
	 * 
	 */
	static const int NORMAL_LETTER_WIDTH;
	/**
	 * 
	 */
	static const int NORMAL_LETTER_HEIGHT;
	/**
	 * 
	 */
	static const int SMALL_LETTER_WIDTH;
	/**
	 * 
	 */
	static const int SMALL_LETTER_HEIGHT;
	/**
	 * 
	 */
	static const int TINY_LETTER_WIDTH;
	/**
	 * 
	 */
	static const int TINY_LETTER_HEIGHT;
	/**
	 * 
	 */
	static const int LCD_SCREEN_WIDTH;
	/**
	 * 
	 */
	static const int LCD_SCREEN_HEIGHT;
	/**
	 * 
	 */
	 ProvidedPort<EV3PapyrusLibrary::Interfaces::EV3Brick::ILcd> lcdScreenPort;
	/**
	 * 
	 * @return ret 
	 */
	 ::PrimitiveTypes::Boolean available();
	/**
	 * 
	 * @return ret 
	 */
	 uint32_t resolution_x();
	/**
	 * 
	 * @return ret 
	 */
	 uint32_t resolution_y();
	/**
	 * 
	 * @return ret 
	 */
	 uint32_t bits_per_pixel();
	/**
	 * 
	 * @return ret 
	 */
	 uint32_t frame_buffer_size();
	/**
	 * 
	 * @return ret 
	 */
	 uint32_t line_length();
	/**
	 * 
	 * @return ret 
	 */
	 unsigned char* frame_buffer();
	/**
	 * 
	 * @return ret 
	 * @param pixel 
	 */
	 void fill(unsigned char /*in*/ pixel);
	/**
	 * 
	 * @return ret 
	 */
	 void init();
	/**
	 * 
	 * @return ret 
	 */
	 void deinit();
	/**
	 * 
	 * @param x 
	 * @param y 
	 * @param text 
	 * @param size 
	 */
	void write_text(int /*in*/ x, int /*in*/ y, ::EV3PapyrusLibrary::Types::LocalString /*in*/ text, ::EV3PapyrusLibrary::Types::TextSize /*in*/ size);
	/**
	 * 
	 * @param x0 
	 * @param y0 
	 * @param x1 
	 * @param y1 
	 * @param isBlack 
	 */
	void draw_line(int /*in*/ x0, int /*in*/ y0, int /*in*/ x1, int /*in*/ y1, bool /*in*/ isBlack);
	/**
	 * 
	 * @param x 
	 * @param y 
	 * @param width 
	 * @param height 
	 * @param isBlack 
	 */
	void draw_full_rectangle(int /*in*/ x, int /*in*/ y, int /*in*/ width, int /*in*/ height, bool /*in*/ isBlack);
	/**
	 * 
	 * @param x 
	 * @param y 
	 * @param width 
	 * @param height 
	 * @param isBlack 
	 */
	void draw_empty_rectangle(int /*in*/ x, int /*in*/ y, int /*in*/ width, int /*in*/ height, bool /*in*/ isBlack);
	/**
	 * 
	 * @param x 
	 * @param y 
	 * @param radius 
	 * @param isBlack 
	 */
	void draw_full_circle(int /*in*/ x, int /*in*/ y, int /*in*/ radius, bool /*in*/ isBlack);
	/**
	 * 
	 * @param x 
	 * @param y 
	 * @param radius 
	 * @param isBlack 
	 */
	void draw_empty_circle(int /*in*/ x, int /*in*/ y, int /*in*/ radius, bool /*in*/ isBlack);
	/**
	 * 
	 * @param x 
	 * @param y 
	 * @param radiusx 
	 * @param radiusy 
	 * @param isBlack 
	 */
	void draw_full_ellipse(int /*in*/ x, int /*in*/ y, int /*in*/ radiusx, int /*in*/ radiusy, bool /*in*/ isBlack);
	/**
	 * 
	 * @param x 
	 * @param y 
	 * @param radiusx 
	 * @param radiusy 
	 * @param isBlack 
	 */
	void draw_empty_ellipse(int /*in*/ x, int /*in*/ y, int /*in*/ radiusx, int /*in*/ radiusy, bool /*in*/ isBlack);
	/**
	 * 
	 * @param filename 
	 * @param x 
	 * @param y 
	 * @param invertColor 
	 */
	void draw_bmp_image(::EV3PapyrusLibrary::Types::LocalString /*in*/ filename, int /*in*/ x, int /*in*/ y, bool /*in*/ invertColor);


};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/


/* Inline functions                                         */


} // of namespace EV3Brick
} // of namespace AbstractClasses
} // of namespace EV3PapyrusLibrary

/************************************************************
              End of AbstractLcd class header
 ************************************************************/

#endif
