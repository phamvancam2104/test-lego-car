// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define EV3PapyrusLibrary_AbstractClasses_EV3Brick_AbstractSound_BODY

/************************************************************
 AbstractSound class body
 ************************************************************/

// include associated header file
#include "EV3PapyrusLibrary/AbstractClasses/EV3Brick/AbstractSound.h"

// Derived includes directives

namespace EV3PapyrusLibrary {
namespace AbstractClasses {
namespace EV3Brick {

// static attributes (if any)

/**
 * 
 * @return ret 
 */
void AbstractSound::beep() {
}

/**
 * 
 * @return ret 
 * @param frequency 
 * @param ms 
 */
void AbstractSound::tone(unsigned int /*in*/frequency, unsigned int /*in*/ms) {
}

/**
 * 
 * @return ret 
 * @param soundfile 
 * @param bSynchronous 
 */
void AbstractSound::play(
		::EV3PapyrusLibrary::Types::LocalString /*in*/soundfile,
		::PrimitiveTypes::Boolean /*in*/bSynchronous) {
}

/**
 * 
 * @return ret 
 * @param text 
 * @param bSynchronous 
 */
void AbstractSound::speak(::EV3PapyrusLibrary::Types::LocalString& /*in*/text,
		::PrimitiveTypes::Boolean /*in*/bSynchronous) {
}

/**
 * 
 * @return ret 
 */
unsigned int AbstractSound::volume() {
}

/**
 * 
 * @return ret 
 * @param v 
 */
void AbstractSound::set_volume(unsigned int /*in*/v) {
}

/**
 * 
 */
AbstractSound::AbstractSound() :
		abstractsoundController(this) {
}

} // of namespace EV3Brick
} // of namespace AbstractClasses
} // of namespace EV3PapyrusLibrary

/************************************************************
 End of AbstractSound class body
 ************************************************************/
